import {iter, ao_iter, is_ao_fn} from './util.jsy'


export async function ao_run(gen_in) ::
  for await let v of gen_in ::


export async function ao_drive(gen_in, gen_tgt, close_tgt) ::
  if is_ao_fn(gen_tgt) ::
    gen_tgt = gen_tgt()
    gen_tgt.next()

  for await let v of gen_in ::
    let {done} = await gen_tgt.next(v)
    if done :: break

  if close_tgt ::
    await gen_tgt.return()


export function ao_step_iter(iterable, or_more) ::
  iterable = ao_iter(iterable)
  return @{}
    async * [Symbol.asyncIterator]() ::
      do ::
        let {value, done} = await iterable.next()
        if done :: return value
        yield value
      while or_more


export function step_iter(iterable, or_more) ::
  iterable = iter(iterable)
  return @{}
    *[Symbol.iterator]() ::
      do ::
        let {value, done} = iterable.next()
        if done :: return value
        yield value
      while or_more


export async function * ao_iter_fenced(gen_in, f_gate, initial=false) ::
  let f = true === initial ? f_gate.fence() : initial
  for await let v of gen_in ::
    await f
    yield v
    f = f_gate.fence()

