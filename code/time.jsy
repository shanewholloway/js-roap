import {ao_fence_fn} from './core/fence.jsy'
import {ao_check_done} from './core/util.jsy'

export function ao_interval(ms=1000) ::
  let [_fence, _resume, _abort] = ao_fence_fn()
  let tid = setInterval(_resume, ms, 1)
  if tid.unref :: tid.unref()
  _fence.stop = @::
    tid = clearInterval(tid)
    _abort()

  return _fence


export function ao_timeout(ms=1000) ::
  let tid, [_fence, _resume] = ao_fence_fn(timeout)
  return timeout

  function timeout() ::
    tid = setTimeout(_resume, ms, 1)
    if tid.unref :: tid.unref()
    return _fence()


export function ao_debounce(ms=300, ao_iterable) ::
  let tid, [_fence, _resume] = ao_fence_fn()

  _fence.when_run = @!>
    try ::
      let p
      for await let v of ao_iterable ::
        clearTimeout(tid)
        p = _fence()
        tid = setTimeout(_resume, ms, v)

      await p
    catch err ::
      ao_check_done(err)

  return _fence


export async function * ao_times(ao_iterable) ::
  let ts0 = Date.now()
  for await let v of ao_iterable ::
    yield Date.now() - ts0

