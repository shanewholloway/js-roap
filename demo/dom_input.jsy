import {ao_pipe, ao_dom_listen} from 'roap'

const ao_tgt = ao_pipe @:
  * xgfold() ::
    let ns = {}
    while 1 ::
      let e = yield ns
      ns[e.k] = e.v

  xemit: ns => @: ...ns


ao_dom_listen(ao_tgt)
  .with_dom @
    document.querySelector('#aaa')
    (elem, evt) => @: k: 'a', v: elem.valueAsNumber
  .listen @ 'input', 'change',

  .with_dom @
    document.querySelector('#bbb')
    elem => @: k: 'b', v: elem.valueAsNumber
  .listen @ 'input', 'change',

  .with_dom @
    document.querySelector('#ccc')
    elem => @: k: 'c', v: elem.valueAsNumber
  .listen @ 'input', 'change',


const ao_tgt_rgb = @*>
  for await {a,b,c} of ao_tgt ::
    let _r = (a*.255).toFixed(1)
    let _g = (b*.255).toFixed(1)
    let _b = (c*.255).toFixed(1)
    yield `rgb(${_r}, ${_g}, ${_b})`
      

const ao_tgt_hsl = @*>
  for await {a,b,c} of ao_tgt ::
    let _h = (a*0.36).toFixed(1)
    let _s = (b/10).toFixed(1)
    let _l = (c/10).toFixed(1)
    
    yield `hsl(${_h}, ${_s}%, ${_l}%)`


::!>
  let el_rgb = document.querySelector('#tgt_rgb')
  for await let rgb of ao_tgt_rgb ::
    el_rgb.textContent = rgb
    el_rgb.style.backgroundColor = rgb

::!>
  let el_hsl = document.querySelector('#tgt_hsl')
  for await let hsl of ao_tgt_hsl ::
    el_hsl.textContent = hsl
    el_hsl.style.backgroundColor = hsl
