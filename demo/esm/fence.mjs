const is_ao_iter = g =>
  null != g[Symbol.asyncIterator];

const is_ao_fn = v_fn =>
  'function' === typeof v_fn
    && ! is_ao_iter(v_fn);


const ao_done = Object.freeze({ao_done: true});
const ao_check_done$1 = err => {
  if (err !== ao_done && err && !err.ao_done) {
    throw err}
  return true};


function fn_chain(tail) {
  chain.tail = tail;
  return chain.chain = chain
  function chain(fn) {
    chain.tail = fn(chain.tail);
    return chain} }

async function ao_run(gen_in) {
  for await (let v of gen_in) {} }

function ao_fence_v(proto) {
  let p=0, _resume = _=>0, _abort = _=>0;
  let _pset = (y,n) => {_resume=y; _abort=n;};

  let fence = () =>(0 !== p ? p : p=new Promise(_pset));
  let resume = (ans) =>(p=0, _resume(ans));
  let abort = (err=ao_done) =>(p=0, _abort(err));

  return proto
    ?{__proto__: proto, fence, resume, abort}
    :[fence, resume, abort] }



const _ao_fence_api_ ={
  __proto__:{
    // generator api
    next(v) {return {value: this.resume(v), done: true}}
  , return() {return {value: this.abort(ao_done), done: true}}
  , throw(err) {return {value: this.abort(err), done: true}}

  , ao_check_done: ao_check_done$1
  , chain(fn) {return fn_chain(this)(fn)} }

, // copyable fence api

  [Symbol.asyncIterator]() {
    return this.ao_fork()}

, async * ao_fork() {
    let {fence} = this;
    try {
      while (1) {
        yield await fence();} }
    catch (err) {
      ao_check_done$1(err);} } };


const ao_fence_obj = ao_fence_v.bind(null,{
  __proto__: _ao_fence_api_

, async * ao_gated(f_gate) {
    try {
      while (1) {
        let v = await f_gate.fence();
        yield v;
        this.resume(v);} }
    catch (err) {
      ao_check_done$1(err);}
    finally {
      f_gate.abort();
      this.abort();} } } );

function ao_split(ag_out) {
  let {f_out} = ag_out;
  if (undefined === f_out) {
    [f_out, ag_out] = ao_tap(ag_out);}

  f_out.when_run = ao_run(ag_out);
  return f_out}


function ao_tap(iterable, order=1) {
  let f_tap = ao_fence_obj();
  let ag_tap = _ao_tap(iterable, f_tap, order);
  ag_tap.f_out = f_tap;
  ag_tap.g_in = f_tap.g_in = iterable.g_in;
  return [f_tap, ag_tap]}

async function * _ao_tap(iterable, g_tap, order=1) {
  try {
    for await (let v of iterable) {
      if (0 >= order) {await g_tap.next(v);}
      yield v;
      if (0 <= order) {await g_tap.next(v);} } }
  catch (err) {
    ao_check_done(err);}
  finally {
    g_tap.return();} }

const ao_fence_in = ao_fence_v.bind(null,{
  __proto__: _ao_fence_api_

, ao_pipe(ns_gen) {
    return this.ao_xform_run({
      xinit: aog_iter, ... ns_gen}) }
, ao_queue(ns_gen) {
    return this.ao_xform_run({
      xinit: aog_sink, ... ns_gen}) }

, aog_iter(xf) {return aog_iter(this)}
, aog_sink(f_gate, xf) {return aog_sink(this, f_gate, xf)}


, ao_xform_tap(ns_gen) {
    return ao_tap(
      this.ao_xform_raw(ns_gen)) }

, ao_xform_run(ns_gen) {
    return ao_split(
      this.ao_xform_raw(ns_gen)) }

, ao_xform_raw(ns_gen=aog_sink) {
    let {xinit, xrecv, xemit} = ns_gen;
    if (undefined === xinit) {
      xinit = is_ao_fn(ns_gen) ? ns_gen : aog_sink;}


    let ag_out, f_out = ao_fence_obj();
    let res = xinit(this, f_out, xrecv);

    if (undefined !== res.g_in) {
      // res is an output generator
      ag_out = res;
      f_out.g_in = res.g_in;}

    else {
      // res is an input generator
      res.next();

      ag_out = f_out.ao_gated(this);
      ag_out.g_in = f_out.g_in = res;
      ag_out.f_out = f_out;}


    if (xemit) {
      let {g_in} = ag_out;
      ag_out = xemit(ag_out);
      ag_out.g_in = g_in;}

    return ag_out} } );



function * aog_iter(g, f_gate, xf) {
  xf = xf ? _xf_gen.create(xf) : void xf;
  try {
    while (1) {
      let tip = yield;
      if (undefined !== xf) {
        tip = xf.next(tip).value;}
      g.next(tip);} }

  catch (err) {
    ao_check_done$1(err);}
  finally {
    g.return();
    if (undefined !== xf) {
      xf.return();} } }


async function * aog_sink(g, f_gate, xf) {
  xf = xf ? _xf_gen.create(xf) : void xf;
  try {
    while (1) {
       {
        let tip = yield;
        if (undefined !== xf) {
          tip = await xf.next(tip);
          tip = tip.value;}
        await g.next(tip);}

      if (undefined !== f_gate) {
        await f_gate.fence();} } }

  catch (err) {
    ao_check_done$1(err);}
  finally {
    g.return();
    if (undefined !== xf) {
      xf.return();} } }


const _xf_gen ={
  create(xf) {
    let self = {__proto__: this};
    self.xg = xf(self.xf_inv());
    return self}

, *xf_inv() {
    while (1) {
      let tip = this._tip;
      if (this === tip) {
        throw new Error('Underflow')}
      else this._tip = this;

      yield tip;} }

, next(v) {
    this._tip = v;
    return this.xg.next(v)}

, return() {this.xg.return();}
, throw() {this.xg.throw();} };

let f = ao_fence_obj();
let tid = setInterval(Boolean, 1000);

{(async ()=>{
  let v;
  console.log("A start", {v});
  v = await f.fence();
  console.log("A1", {v});
  v = await f.fence();
  console.log("A2", {v});
  v = await f.fence();
  console.log("A3", {v});
  v = await f.fence();
  console.log("proc A done", {v}); })();}

{(async ()=>{
  let v;
  console.log("M start", {v});
  v = await f.fence();
  console.log("M1", {v});
  v = await f.fence();
  console.log("M2", {v});
  v = await f.fence();
  console.log("M3", {v});
  v = await f.fence();
  console.log("M4", {v});
  v = await f.fence();
  console.log("proc M done", {v}); })();}

{(async ()=>{
  for await (let v of f) {
    console.log("G", {v}); }

  console.log("proc G done");
  tid = clearInterval(tid);})();}

{(async ()=>{
  for (let i=1; i<10; i++) {
    let txt = `S${i}`;
    await txt;

    console.log('');
    console.log(txt);
    f.resume(txt);
    console.log('');}

  await 0;
  console.log("S done");
  f.fence.done = true;
  f.resume('bye');
  console.log("proc S done"); })();}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
