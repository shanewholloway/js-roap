const ao_done$1 = Object.freeze({ao_done: true});
const ao_check_done = err => {
  if (err !== ao_done$1 && err && !err.ao_done) {
    throw err}
  return true};

function ao_defer_ctx(as_res = (...args) => args) {
  let y,n,_pset = (a,b) => { y=a, n=b; };
  return p =>(
    p = new Promise(_pset)
  , as_res(p, y, n)) }

function ao_fence_v(proto) {
  let x, p0, p=0, reset=ao_defer_ctx();

  let fence  = at =>(0===at ? p0 : 0!==p ? p : p=(x=reset())[0]);
  let resume = ans => xz(x[1], ans);
  let abort  = err => xz(x[2], err || ao_done$1);

  p0 = fence(); // initialize x, p, and p0
  return proto
    ?{__proto__: proto, fence, resume, abort}
    :[fence, resume, abort]

  function xz(xf, v) {
    if (0!==p) {
      p0 = p; p = 0;
      xf(v);} } }

async function * ao_iter_fence(fence) {
  try {
    while (1) {
      let r = await fence();
      if (undefined !== r) {
        yield r;} } }
  catch (err) {
    ao_check_done(err);} }



const _ao_fence_core_api_ = {
  ao_check_done

, // copyable fence fork api
  [Symbol.asyncIterator]() {
    return this.ao_fork()}

, ao_fork() {
    let ag = ao_iter_fence(this.fence);
    let {xemit} = this;
    return xemit ? xemit(ag) : ag} };


const ao_fence_obj = /* #__PURE__ */
  ao_fence_v.bind(null, _ao_fence_core_api_);

Promise.resolve({type:'init'});

function bind_output_log(el_output='output') {
  el_output = 'string' === typeof el_output
    ? document.querySelector(el_output)
    : el_output;

  return (( ... args ) => {
    console.log(... args);

    let el = document.createElement('p');
    el.textContent = args.flat().filter(Boolean).join(' ');
    el_output.insertBefore(el, el_output.firstChild);}) }


function bind_log(el_output='output') {
  return 'object' === typeof document
    ? bind_output_log(el_output)
    : console.log.bind(console)}

let out_log = bind_log('output');

let f = ao_fence_obj();
let tid = setInterval(Boolean, 1000);

{(async ()=>{
  let v;
  out_log("A start", {v});
  v = await f.fence();
  out_log("A1", {v});
  v = await f.fence();
  out_log("A2", {v});
  v = await f.fence();
  out_log("A3", {v});
  v = await f.fence();
  out_log("proc A done", {v}); })();}

{(async ()=>{
  let v;
  out_log("M start", {v});
  v = await f.fence();
  out_log("M1", {v});
  v = await f.fence();
  out_log("M2", {v});
  v = await f.fence();
  out_log("M3", {v});
  v = await f.fence();
  out_log("M4", {v});
  v = await f.fence();
  out_log("proc M done", {v}); })();}

{(async ()=>{
  for await (let v of f) {
    out_log("G", {v}); }

  out_log("proc G done");
  tid = clearInterval(tid);})();}

{(async ()=>{
  for (let i=1; i<10; i++) {
    let txt = `S${i}`;
    await txt;

    out_log('');
    out_log(txt);
    f.resume(txt);
    out_log('');}

  await 0;
  out_log("S done");
  f.fence.done = true;
  f.resume('bye');
  out_log("proc S done"); })();}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
