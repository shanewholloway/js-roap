
export const is_ao_iter = g =>
  null != g[Symbol.asyncIterator]

export const is_ao_fn = v_fn =>
  'function' === typeof v_fn
    && ! is_ao_iter(v_fn)


export const ao_done = Object.freeze @: ao_done: true
export const ao_check_done = err => ::
  if err !== ao_done && err && !err.ao_done ::
    throw err
  return true


export function * iter(gen_in) ::
  yield * gen_in
export async function * ao_iter(gen_in) ::
  yield * gen_in


export function fn_chain(tail) ::
  chain.tail = tail
  return chain.chain = chain
  function chain(fn) ::
    chain.tail = fn(chain.tail)
    return chain
