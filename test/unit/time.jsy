import {ao_interval, ao_timeout, ao_debounce, ao_times, ao_iter_fenced, ao_iter} from 'roap'

import @{}
  assert, expect,
  is_gen, is_fn, is_async_iterable
from './_utils.jsy'


describe @ 'time', @::
  it @ 'shape', @::
    is_fn @ ao_interval
    is_fn @ ao_timeout
    is_fn @ ao_times


  it @ 'ao_interval', @::>
    let aot = is_async_iterable @
      ao_interval(10)
    let g = ao_iter(aot)

    try ::
      let p = g.next()
      expect(p).to.be.a('promise')

      let {value} = await p
      assert.equal(1, value)

    finally ::
      g.return()


  it @ 'ao_timeout', @::>
    let aot = is_async_iterable @
      ao_timeout(10)
    let g = ao_iter(aot)

    try ::
      let p = g.next()
      expect(p).to.be.a('promise')

      let {value} = await p
      assert.equal(1, value)

    finally ::
      g.return()


  it @ 'ao_debounce', @::>
    let aot = is_async_iterable @
      ao_debounce(10, [30, 20, 10, 15])
    let g = ao_iter(aot)

    expect(aot.when_run).to.be.a('promise')

    let p = g.next()
    expect(p).to.be.a('promise')

    let {value} = await p
    assert.equal(15, value)

    await aot.when_run


  it @ 'ao_iter_fenced with ao_interval as rate limit', @::>
    let g = is_gen @
      ao_iter_fenced @
        [30, 20, 10, 15]
        ao_interval(10)

    let p = g.next()
    expect(p).to.be.a('promise')

    let {value} = await p
    expect(value).to.equal(30)

    let lst = [value]
    for await let v of g ::
      lst.push(v)

    expect(lst).to.deep.equal @
      [30, 20, 10, 15]


  it @ 'ao_times', @::>
    let g = is_gen @ ao_times @ ao_interval(10)

    try ::
      let p = g.next()
      expect(p).to.be.a('promise')

      let {value: ts1} = await p
      assert(ts1 >= 0)

      let {value: ts2} = await g.next()
      assert(ts2 >= ts1)

    finally ::
      g.return()
