import {_obj_assign, _is_fn} from '../core/_common.jsy'
import {_xinvoke} from '../core/util.jsy'

const _as_pipe_end = (g,ns) => _obj_assign(g, ns)

//~~~
// Pipe base as generator in composed object-functional implementation

export const _ao_pipe_base = @{}
  xfold: v => v // on push: identity transform
  xpull() {} // memory: none
  xemit: _xinvoke // identity transform or invoke if function
  xinit(g_in, ag_out) {} // on init: default behavior

  get create() ::
    // as getter to bind class as `this` at access time
    const create = (... args) =>
      _obj_assign @ {__proto__: this},
        ... args.map(_xinvoke)
      ._ao_pipe()

    return create.create = create

  _ao_pipe() ::
    let fin_lst = []
    let self = @{}
      on_fin: g => @
        fin_lst.push(g)
        g

      stop: @::
        this.done = true
        _fin_pipe(fin_lst)
        this._resume()

    let {kind} = this
    let g_in = self.on_fin @ this._ao_pipe_in @ self.stop
    let ag_out = self.on_fin @ this._ao_pipe_out @ self.stop

    self.g_in = g_in = this._as_pipe_in @ g_in, self, kind
    ag_out = this._as_pipe_out @ ag_out, self, kind

    this.xinit(g_in, ag_out)

    // allow g_in to initialize
    g_in.next()
    return ag_out

  _as_pipe_in: _as_pipe_end
  _as_pipe_out: _as_pipe_end

  //~~~
  // Upstream input generator
  //   designed for multiple feeders

  *_ao_pipe_in(_finish) ::
    try ::
      let v
      while ! this.done ::
        v = this.xfold(yield v)
        this.value = v
        if 0 !== this._waiting && undefined !== v ::
          this._resume()

    finally ::
      _finish()


  //~~~
  // Downstream async output generator
  //   designed for single consumer.

  async *_ao_pipe_out(_finish) ::
    try ::
      let r
      while ! this.done ::
        if 0 !== (r = this._waiting) ::
          // p0: existing waiters
          r = await r
          if this.done :: break
        else if undefined !== (r = this.value) ::
          // p1: available value
          this.value = undefined
        else if undefined !== (r = this.xpull()) ::
          // p2: xpull value (e.g. queue memory) 
        else ::
          // p3: add new waiter
          r = await this._bind_waiting()
          if this.done :: break

        yield this.xemit(r)

    finally ::
      _finish()


  //~~~
  // generator-like value/done states

  value: undefined
  done: false

  //~~~
  // promise-based fence tailored for ao_pipe usecase

  _waiting: 0
  _fulfill() ::
  async _resume() ::
    if ! this.done :: await this

    let {value, _fulfill} = this
    if undefined != value || this.done ::
      this.value = undefined
      this._waiting = 0
      _fulfill(value)

  _bind_waiting() ::
    let _reset = y => this._fulfill = y
    this._bind_waiting = () => this._waiting || @
      this._waiting = new Promise(_reset)
    return this._bind_waiting()


function _fin_pipe(fin_lst) ::
  while 0 !== fin_lst.length ::
    let g = fin_lst.pop()
    try ::
      if _is_fn(g) :: g()
      else g.return()
    catch (err) ::
      if err instanceof TypeError ::
        if 'Generator is already running' === err.message ::
          continue
      console.error(err)

