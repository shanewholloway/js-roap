import {_obj_assign, _is_fn} from './_common.jsy'


export function ao_fence_v() ::
  let p=0, _resume = ()=>{}
  let _pset = a => _resume = a

  return @[]
    () => 0 !== p ? p
      : p = new Promise(_pset)

    v => :: p = 0; _resume(v)


const _ao_fence_api = @{}
  stop() :: this.fence.done = true

  ao_marks(opt) ::
    return ao_fence_marks(this.fence, opt)

  [Symbol.asyncIterator]() ::
    return this.ao_marks()

export function ao_fence_fn(tgt) ::
  let f = ao_fence_v()
  if undefined === tgt :: tgt = f[0]
  tgt.fence = _obj_assign @ tgt, _ao_fence_api
  return f

export function ao_fence_obj() ::
  let f = ao_fence_v()
  f[0].fence = _obj_assign @ f[0], _ao_fence_api
  return @{}
    __proto__: _ao_fence_api
    fence: f[0], reset: f[1]


export async function * ao_fence_fork(fence) ::
  while ! fence.done ::
    let v = await fence()
    if fence.done ::
      return v
    yield v

export async function * ao_fence_marks(fence, opt) ::
  let {signal, trailing, initial} = opt || {}
  let f = true === initial
    ? fence() : initial

  while ! fence.done ::
    let v
    if trailing ::
      v = await f
      f = fence()

    else ::
      f = fence()
      v = await f

    if fence.done ::
      return v

    if _is_fn(signal) ::
      yield signal(v)
    else if signal ::
      yield signal
    else yield v

