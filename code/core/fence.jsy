import {ao_when_map} from './when.jsy'
import {ao_defer_v} from './defer.jsy'
import {ao_done, ao_check_done} from './util.jsy'

export function ao_fence_o(proto) ::
  let r = ao_fence_v()
  return @{} __proto__: proto,
    fence: r[0], resume: r[1], abort: r[2]

export function ao_fence_v() ::
  let x, p=0
  let fence  = () => ( 0!==p ? p : p=(x=ao_defer_v())[0] )
  let resume = ans => { if (0!==p) { p=0; x[1](ans) }}
  let abort  = err => { if (0!==p) { p=0; x[2](err || ao_done) }}
  return @[] fence, resume, abort


export const ao_fence_when = db =>
  ao_when_map(ao_fence_v, db)

export async function * ao_iter_fence(fence) ::
  try ::
    while 1 ::
      let r = await fence()
      if undefined !== r ::
        yield r
  catch err ::
    ao_check_done(err)



export const _ao_fence_core_api_ = /* #__PURE__ */ @{}
  ao_check_done

  // copyable fence fork api
  [Symbol.asyncIterator]() ::
    return this.ao_fork()

  ao_fork() ::
    let ag = ao_iter_fence(this.fence)
    let {xemit} = this
    return xemit ? xemit(ag) : ag


export function ao_fence_fn(tgt) ::
  let f = ao_fence_v()
  if undefined === tgt :: tgt = f[0]
  tgt.fence = Object.assign(tgt, _ao_fence_core_api_)
  return f


export const ao_fence_obj = /* #__PURE__ */
  () => ao_fence_o(_ao_fence_core_api_)


export function as_iter_proto(resume, abort, done = true) ::
  return @{}
    next: v => @: value: resume(v), done
    return: () => @: value: abort(ao_done), done
    throw: (err) => @: value: abort(err), done

