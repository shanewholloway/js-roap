

export function ao_fence_v() ::
  let _p=0, _resume = ()=>{}
  let _bind = f => _resume = f

  return @[]
    () => 0 !== _p ? _p
      : _p = new Promise(_bind)

    v => :: _p = 0; _resume(v)


const _ao_fence_api = @{}
  ao_marks(opt) ::
    return ao_fence_marks(this.fence, opt)

  [Symbol.asyncIterator]() ::
    return this.ao_marks()

export function ao_fence() ::
  let f = ao_fence_v()
  return @{}
    __proto__: _ao_fence_api
    fence: f[0], reset: f[1]


export async function * ao_fence_marks(fence, opt) ::
  let {signal, trailing, initial} = opt || {}
  let f = true === initial
    ? fence() : initial

  while 1 ::
    let v
    if trailing ::
      v = await f
      f = fence()

    else ::
      f = fence()
      v = await f

    if 'function' === typeof signal ::
      yield signal(v)
    else if signal ::
      yield signal
    else yield v

