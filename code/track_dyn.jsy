import {as_fn, _ret_void} from './_common.jsy'
import {ao_latest, is_ao_iter, _ao_walk} from './basic.jsy'


export function ao_dyn() ::
  let _ctrl = {}

  const [aod, ao_update] = ao_latest()
  aod.get = @=> aod
  aod.set = _dyn_set
  return aod

  function _dyn_set(dyn_val) ::
    _ctrl.done = true

    if is_ao_iter(dyn_val) ::
      _ctrl = {done: false}
      _ao_walk(_ctrl, dyn_val, ao_update)
      return true

    else ::
      ao_update(dyn_val)
      return true


export function ao_dyn_ns(fn_init, ns=new Map()) ::
  fn_init = as_fn(fn_init, _ret_void)
  return @{}
    has: k => ns.has(k)
    get: k => _ao_dyn_at(ns, k, fn_init).get()
    set: (k, v) => _ao_dyn_at(ns, k).set(v)

export function _ao_dyn_at(ns, k, fn_init) ::
  let ao = ns.get(k)
  if undefined === ao ::
    ao = ao_dyn()
    ns.set(k, ao)
    if undefined !== fn_init ::
      ao.set @ fn_init(k)
  return ao


export function ao_dyn_obj(...args) ::
  return _ns_obj_proxy @ ao_dyn_ns(...args)

export function _ns_obj_proxy(ns) ::
  return new Proxy @ {}, @{}
    has: (ot, k) => ns.has(k)
    get: (ot, k) => ns.get(k)
    set: (ot, k, v) => ns.set(k, v)

