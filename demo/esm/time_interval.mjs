const {
  assign: _obj_assign,
  defineProperties: _obj_props,
} = Object;

function ao_fence_v() {
  let p=0, _resume = ()=>{};
  let _pset = a => _resume = a;

  return [
    () => 0 !== p ? p
      : p = new Promise(_pset)

  , v => {p = 0; _resume(v);} ] }


const _ao_fence_api ={
  stop() {this.fence.done = true;}

, ao_fork() {
    return ao_fence_fork(this.fence)}

, [Symbol.asyncIterator]() {
    return this.ao_fork()} };

function ao_fence_fn(tgt) {
  let f = ao_fence_v();
  if (undefined === tgt) {tgt = f[0];}
  tgt.fence = _obj_assign(tgt, _ao_fence_api);
  return f}


async function * ao_fence_fork(fence) {
  while (! fence.done) {
    let v = await fence();
    if (fence.done) {
      return v}
    yield v;} }

function ao_interval(ms=1000) {
  let [_fence, _reset] = ao_fence_fn();
  let tid = setInterval(_reset, ms, 1);
  if (tid.unref) {tid.unref();}
  _fence.stop = (() => {
    tid = clearInterval(tid);
    _fence.done = true;});
  return _fence}


async function * ao_times(gen_in) {
  let ts0 = Date.now();
  for await (let v of gen_in) {
    yield Date.now() - ts0;} }

let demo_duration = setTimeout(Boolean, 15000);

{(async ()=>{
  let i = 0;
  for await (let v of ao_interval(1000)) {
    console.log('interval', {v, i: i++});} })();}

{(async ()=>{
  let i = 0;
  for await (let ts of ao_times(ao_interval(1000)) ) {
    console.log('ao_time interval', {ts, i: i++});} })();}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
