import {_obj_assign} from './_common.jsy'

export const _xinvoke = v_fn =>
  'function' === typeof v_fn && ! is_ao_iter(v_fn)
    ? v_fn()
    : v_fn

export function _xpipesrc(pipe) ::
  pipe = _xinvoke(pipe)
  if null != pipe ::
    return pipe.gsrc || pipe



export function * iter(gen_in) ::
  yield * _xinvoke(gen_in)

export async function * ao_iter(gen_in) ::
  yield * _xinvoke(gen_in)

export const is_ao_iter = g =>
  null != g[Symbol.asyncIterator]



export function fn_chain(tail) ::
  return _obj_assign @ chain, @{}
    chain, tail: _xinvoke(tail)

  function chain(fn) ::
    chain.tail = fn(chain.tail)
    return chain


export function _wm_pipe_closure(wm_absent) ::
  let wm = new WeakMap()
  return pipe => _wm_item(wm, pipe.gsrc || pipe, wm_absent)

export function _wm_closure(wm_absent) ::
  let wm = new WeakMap()
  return key => _wm_item(wm, key, wm_absent)

export function _wm_item(wm, wm_key, wm_absent) ::
  let item = wm.get(wm_key)
  if undefined === item ::
    item = wm_absent(wm_key)
    wm.set(wm_key, item)
  return item

