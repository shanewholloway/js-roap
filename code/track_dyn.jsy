import {ao_latest, is_ao_iter, _ao_walk} from './basic.jsy'


export function ao_dyn() ::
  let _ctrl = {}

  const [aod, ao_update] = ao_latest()
  aod.get = @=> aod
  aod.set = _dyn_set
  return aod

  function _dyn_set(dyn_val) ::
    _ctrl.done = true

    if is_ao_iter(dyn_val) ::
      _ctrl = {done: false}
      _ao_walk(_ctrl, dyn_val, ao_update)
      return true

    else ::
      ao_update(dyn_val)
      return true


export function ao_dyn_ns(ns = new Map()) ::
  return @{}
    has: k => ns.has(k)
    get: k => ao_dyn_at(k).get()
    set: (k, v) => ao_dyn_at(k).set(v)

  function ao_dyn_at(k) ::
    let ao = ns.get(k)
    if undefined === ao ::
      ao = ao_dyn()
      ns.set(k, ao)
    return ao


export function ao_dyn_obj(ns = new Map()) ::
  return _ns_obj_proxy @ ao_dyn_ns(ns)

export function _ns_obj_proxy(ns = new Map()) ::
  return new Proxy @ {}, @{}
    has: (ot, k) => ns.has(k)
    get: (ot, k) => ns.get(k)
    set: (ot, k, v) => ns.set(k, v)

