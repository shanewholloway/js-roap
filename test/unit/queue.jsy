import {ao_fence_in, ao_iter, ao_drive} from 'roap'

import @{}
  assert, expect,
  is_gen, is_fn, is_async_iterable
  delay_walk, array_from_ao_iter,
from './_utils.jsy'


describe @ 'ao_fence_in().ao_queue()', function() ::
  it @ 'shape', @::
    let some_queue = is_async_iterable @
      ao_fence_in().ao_queue()

    is_gen(some_queue.g_in)
    expect(some_queue.fence).to.be.a('function')

  it @ 'singles', @::>
    let some_queue = ao_fence_in().ao_queue()

    let p_out1 = ao_iter(some_queue).next()
    expect(p_out1).to.be.a('promise')

    let p_in1 = some_queue.g_in.next @ 'first'
    expect(p_in1).to.be.a('promise')

    expect(await p_out1).to.deep.equal @:
      value: 'first', done: false

  it @ 'vec', @::>
    let some_queue = ao_fence_in().ao_queue @:
      async * xrecv(g) ::
        for await let v of g ::
          yield 1000+v

    let out = array_from_ao_iter(some_queue)

    await ao_drive @
      delay_walk @# 25, 50, 75, 100
      some_queue.g_in

    await some_queue.g_in.return()

    expect(await out).to.deep.equal @#
      1025, 1050, 1075, 1100

