import {ao_fence_obj} from 'roap'

import {bind_log} from './_demo_utils.jsy'
let out_log = bind_log('output')

let f = ao_fence_obj()
let tid = setInterval(Boolean, 1000)

::!>
  let v
  out_log @ "A start", {v}
  v = await f.fence()
  out_log @ "A1", {v}
  v = await f.fence()
  out_log @ "A2", {v}
  v = await f.fence()
  out_log @ "A3", {v}
  v = await f.fence()
  out_log @ "proc A done", {v}

::!>
  let v
  out_log @ "M start", {v}
  v = await f.fence()
  out_log @ "M1", {v}
  v = await f.fence()
  out_log @ "M2", {v}
  v = await f.fence()
  out_log @ "M3", {v}
  v = await f.fence()
  out_log @ "M4", {v}
  v = await f.fence()
  out_log @ "proc M done", {v}

::!>
  for await let v of f ::
    out_log @ "G", {v}

  out_log @ "proc G done"
  tid = clearInterval(tid)

::!>
  for let i=1; i<10; i++ ::
    let txt = `S${i}`
    await txt

    out_log('')
    out_log(txt)
    f.resume(txt)
    out_log('')

  await 0
  out_log @ "S done"
  f.fence.done = true
  f.resume('bye')
  out_log @ "proc S done"

