const is_ao_iter = g =>
  null != g[Symbol.asyncIterator];

const is_ao_fn = v_fn =>
  'function' === typeof v_fn
    && ! is_ao_iter(v_fn);


const ao_done$1 = Object.freeze({ao_done: true});
const ao_check_done = err => {
  if (err !== ao_done$1 && err && !err.ao_done) {
    throw err}
  return true};


const _ag_copy = ({g_in}, ag_out) =>(
  undefined === g_in ? ag_out :(
    ag_out.g_in = g_in
  , ag_out) );

function ao_defer_ctx(as_res = (...args) => args) {
  let y,n,_pset = (a,b) => { y=a, n=b; };
  return p =>(
    p = new Promise(_pset)
  , as_res(p, y, n)) }

async function ao_run(gen_in) {
  for await (let v of gen_in) {} }

function ao_fence_v(proto) {
  let x, p0, p=0, reset=ao_defer_ctx();

  let fence  = at =>(0===at ? p0 : 0!==p ? p : p=(x=reset())[0]);
  let resume = ans => xz(x[1], ans);
  let abort  = err => xz(x[2], err || ao_done$1);

  p0 = fence(); // initialize x, p, and p0
  return proto
    ?{__proto__: proto, fence, resume, abort}
    :[fence, resume, abort]

  function xz(xf, v) {
    if (0!==p) {
      p0 = p; p = 0;
      xf(v);} } }

async function * ao_iter_fence(fence) {
  try {
    while (1) {
      let r = await fence();
      if (undefined !== r) {
        yield r;} } }
  catch (err) {
    ao_check_done(err);} }



const _ao_fence_core_api_ = {
  ao_check_done

, // copyable fence fork api
  [Symbol.asyncIterator]() {
    return this.ao_fork()}

, ao_fork() {
    let ag = ao_iter_fence(this.fence);
    let {xemit} = this;
    return xemit ? xemit(ag) : ag} };


function ao_fence_fn(tgt) {
  let f = ao_fence_v();
  if (undefined === tgt) {tgt = f[0];}
  tgt.fence = Object.assign(tgt, _ao_fence_core_api_);
  return f}

const ao_fence_out = /* #__PURE__ */ ao_fence_v.bind(null,{
  __proto__: _ao_fence_core_api_

, [Symbol.asyncIterator]() {
    return this.ao_bound()}
, ao_bound() {
    throw new Error('ao_fence_out not bound')}
, _ao_many() {
    throw new Error('ao_fence_out consumed; consider .ao_fork() or .allow_many()')}

, allow_many() {
    let {ao_fork, ao_bound, _ao_many} = this;
    if (_ao_many === ao_bound) {
      this.ao_bound = ao_fork;}
    this._ao_many = ao_fork;
    this.allow_many = () => this;
    return this}

, ao_run() {
    let {when_run} = this;
    if (undefined === when_run) {
      this.when_run = when_run =
        ao_run(this.ao_bound()); }
    return when_run}

, bind_gated(f_gate) {
    let ag_out = this._ao_gated(f_gate);
    ag_out.f_out = this;
    ag_out.g_in = this.g_in;
    this.ao_bound = (() => {
      let {xemit, _ao_many} = this;
      this.ao_bound = _ao_many;
      return xemit
        ? _ag_copy(ag_out, xemit(ag_out))
        : ag_out});

    return this}

, ao_gated(f_gate) {
    return this.bind_gated(f_gate).ao_bound()}

, _ao_gated(f_gate) {return aog_gated(this, f_gate)} } );


async function * aog_gated(f_out, f_gate) {
  try {
    f_out.resume();
    while (1) {
      let v = await f_gate.fence();
      yield v;
      f_out.resume(v);} }
  catch (err) {
    ao_check_done(err);}
  finally {
    f_out.abort();
    if (f_gate.abort) {
      f_gate.abort();} } }


function * aog_iter(f_in, f_gate, xf) {
  try {
    while (1) {
      let tip = yield;
      if (undefined !== xf) {
        tip = (xf.next(tip)).value;}
      f_in.resume(tip);} }

  catch (err) {
    ao_check_done(err);}
  finally {
    f_in.abort();
    if (undefined !== xf) {
      xf.return();} } }


async function * aog_sink(f_in, f_gate, xf) {
  try {
    while (1) {
       {
        let tip = yield;
        if (undefined !== xf) {
          tip = (await xf.next(tip)).value;}
        f_in.resume(tip);}

      if (undefined !== f_gate) {
        await f_gate.fence();} } }

  catch (err) {
    ao_check_done(err);}
  finally {
    f_in.abort();
    if (undefined !== xf) {
      xf.return();} } }
const ao_queue = ns_gen => ao_fence_in().ao_queue(ns_gen);

const ao_fence_in = /* #__PURE__ */ ao_fence_v.bind(null,{
  __proto__: _ao_fence_core_api_

, ao_fold(ns_gen) {return this.ao_xform({xinit: aog_iter, ... ns_gen})}
, ao_queue(ns_gen) {return this.ao_xform({xinit: aog_sink, ... ns_gen})}

, aog_iter(xf) {return aog_iter(this)}
, aog_sink(f_gate, xf) {return aog_sink(this, f_gate, xf)}

, ao_xform(ns_gen={}) {
    let f_out = ao_fence_out();

    let {xemit, xinit, xrecv} =
      is_ao_fn(ns_gen)
        ? ns_gen(this, f_out)
        : ns_gen;

    if (undefined !== xemit) {
      f_out.xemit = xemit;}

    if (! xinit) {xinit = aog_sink;}
    let res = xinit(this, f_out,
      xrecv ? _xf_gen.create(xrecv) : undefined);

    let g_in = f_out.g_in = res.g_in || res;
    return res !== g_in
      ? res // res is an output generator
      :(// res is an input generator
          g_in.next(),
          f_out.bind_gated(this)) }

, // ES2015 generator api
  next(v) {return {value: this.resume(v), done: true}}
, return() {return {value: this.abort(ao_done$1), done: true}}
, throw(err) {return {value: this.abort(err), done: true}} } );


const _xf_gen = {
  create(xf) {
    let self = {__proto__: this};
    self.xg = xf(self.xf_inv());
    return self}

, *xf_inv() {
    while (1) {
      let tip = this._tip;
      if (this === tip) {
        throw new Error('Underflow')}
      else this._tip = this;

      yield tip;} }

, next(v) {
    this._tip = v;
    return this.xg.next(v)}

, return() {this.xg.return();}
, throw() {this.xg.throw();} };

function ao_interval(ms=1000) {
  let [_fence, _resume, _abort] = ao_fence_fn();
  let tid = setInterval(_resume, ms, 1);
  if (tid.unref) {tid.unref();}
  _fence.stop = (() => {
    tid = clearInterval(tid);
    _abort();});

  return _fence}


async function * ao_times(ao_iterable) {
  let ts0 = Date.now();
  for await (let v of ao_iterable) {
    yield Date.now() - ts0;} }

const _evt_init = Promise.resolve({type:'init'});
function ao_dom_listen(self=ao_queue()) {
  return _bind.self = self ={
    __proto__: self
  , with_dom(dom, fn) {
      return dom.addEventListener
        ? _ao_with_dom(_bind, fn, dom)
        : _ao_with_dom_vec(_bind, fn, dom)} }

  function _bind(dom, fn_evt, fn_dom) {
    return evt => {
      let v = fn_evt
        ? fn_evt(evt, dom, fn_dom)
        : fn_dom(dom, evt);

      if (null != v) {
        self.g_in.next(v);} } } }


function _ao_with_dom(_bind, fn, dom) {
  let _on_evt;
  if (is_ao_fn(fn)) {
    _evt_init.then(
      _on_evt = _bind(dom, void 0, fn)); }

  return {
    __proto__: _bind.self
  , listen(...args) {
      let opt, evt_fn = _on_evt;

      let last = args.pop();
      if ('function' === typeof last) {
        evt_fn = _bind(dom, last, _on_evt);
        last = args.pop();}

      if ('string' === typeof last) {
        args.push(last);}
      else opt = last;

      for (let evt of args) {
        dom.addEventListener(
          evt, evt_fn, opt); }

      return this} } }


function _ao_with_dom_vec(_bind, fn, ectx_list) {
  ectx_list = Array.from(ectx_list,
    dom => _ao_with_dom(_bind, fn, dom));

  return {
    __proto__: _bind.self
  , listen(...args) {
      for (let ectx of ectx_list) {
        ectx.listen(...args);}
      return this} } }

function bind_output_log(el_output='output') {
  el_output = 'string' === typeof el_output
    ? document.querySelector(el_output)
    : el_output;

  return (( ... args ) => {
    console.log(... args);

    let el = document.createElement('p');
    el.textContent = args.flat().filter(Boolean).join(' ');
    el_output.insertBefore(el, el_output.firstChild);}) }

const {port1, port2} = new MessageChannel();
const ao_tgt = ao_dom_listen();

ao_tgt
  .with_dom(port1, void port1.start())
  .listen('message',
    (evt, el) =>({port111: evt.data}) )

  .with_dom(port2, void port2.start())
  .listen('message',
    evt =>({port222: evt.data}) );

{(async ()=>{
  let out_log = bind_output_log('output');
  for await (let m of ao_tgt) {
    out_log(JSON.stringify(m, null, 2)); } })();}

{(async ()=>{
  for await (let ts of ao_times(ao_interval(1000)) ) {
    port1.postMessage(`from port 111: ${ts}`); } })();}

{(async ()=>{
  for await (let ts of ao_times(ao_interval(1200)) ) {
    port2.postMessage(`from port 222: ${ts}`); } })();}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
