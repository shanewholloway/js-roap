import {ao_defer, ao_defer_v} from 'roap'
import @{}
  assert, expect,
  delay_race, delay,
from './_utils.jsy'


describe @ 'core ao_defer', @::

  describe @ 'ao_defer_v tuple', @::
    it @ 'shape', @::
      const res = ao_defer_v()
      expect(res).to.be.an('array').of.length(3)
      expect(res[0]).to.be.a('promise')
      expect(res[1]).to.be.a('function')
      expect(res[2]).to.be.a('function')

    it @ 'use, resolve', @::>
      const [p, resolve, reject] = ao_defer_v()

      assert.equal @ 'timeout', await delay_race(p,1)

      resolve('yup')
      assert.equal @ 'yup', await delay_race(p,1)

    it @ 'use, reject', @::>
      const [p, resolve, reject] = ao_defer_v()

      assert.equal @ 'timeout', await delay_race(p,1)

      reject @ new Error('nope')

      try ::
        await p
        assert.fail()
      catch err ::
        assert.equal @ 'nope', err.message



  describe @ 'ao_defer object', @::
    it @ 'shape', @::
      const res = ao_defer()
      expect(res).to.be.an('object')
      expect(res.promise).to.be.a('promise')
      expect(res.resolve).to.be.a('function')
      expect(res.reject).to.be.a('function')

    it @ 'use, resolve', @::>
      const res = ao_defer()
      let p = res.promise

      assert.equal @ 'timeout', await delay_race(p,1)

      res.resolve('yup')
      assert.equal @ 'yup', await delay_race(p,1)

    it @ 'use, reject', @::>
      const res = ao_defer()
      let p = res.promise

      assert.equal @ 'timeout', await delay_race(p,1)

      res.reject @ new Error('nope')

      try ::
        await p
        assert.fail()
      catch err ::
        assert.equal @ 'nope', err.message

