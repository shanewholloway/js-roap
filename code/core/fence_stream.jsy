import {ao_defer_v} from './defer.jsy'
import {ao_fence_v} from './fence.jsy'


export function ao_push_stream(as_vec) ::
  let q=[], [fence, resume, abort] = ao_fence_v()
  let stream = ao_stream_fence(fence)

  return Object.assign @ stream, @{}
    stream
    abort
    push(... args) ::
      if true === as_vec ::
        q.push(args)
      else q.push(... args)

      resume(q)
      return q.length


export function ao_stream_fence(fence) ::
  let [when_done, res_done, rej_done] = ao_defer_v()
  let res = _ao_stream_fence(fence, res_done, rej_done)
  res.when_done = when_done
  return res


async function * _ao_stream_fence(fence, resolve, reject) ::
  try ::
    let p_ready = fence()
    while 1 ::
      let batch = await p_ready
      batch = batch.splice(0, batch.length)

      p_ready = fence()
      yield * batch

  catch err ::
    if !err || err.ao_done ::
      resolve(true)
    else reject(err)

