const { assert, expect } = require('chai')
export @{} assert, expect

export const delay = (ms=1) => 
  new Promise @ y =>
    setTimeout @ y, ms, 'timeout'

export const delay_race = (p, ms=1) => 
  Promise.race @# p, delay(ms)

export async function * delay_walk(g_in, ms=1) ::
  await delay(ms)
  for await let v of g_in ::
    yield v
    await delay(ms)

export function is_fn(fn) ::
  expect(fn).to.be.a('function')
  return fn

export function is_gen(g) ::
  is_fn(g.next)
  is_fn(g.return)
  is_fn(g.throw)
  return g

export function is_fence_core(f) ::
  is_fn(f.fence)
  is_fn(f.ao_fork)
  is_async_iterable(f)

  is_fn(f.ao_check_done)
  is_fn(f.chain)
  return f

export function is_fence_gen(f) ::
  is_fence_core(f)
  is_fn(f.abort)
  is_fn(f.resume)

  is_gen(f)
  return f

export function is_async_iterable(o) ::
  assert @ null != o[Symbol.asyncIterator], 'async iterable'
  return o

export async function array_from_ao_iter(g) ::
  let res = []
  for await let v of g ::
    res.push(v)
  return res

