

export function ao_fence_v() ::
  let _p=0, _resume = ()=>{}
  let _bind = f => _resume = f

  return @[]
    () => 0 !== _p ? _p
      : _p = new Promise(_bind)

    v => :: _p = 0; _resume(v)


export function ao_fence() ::
  let v = ao_fence_v()
  return { fence: v[0], reset: v[1] }


const _v_one = () => 1
export async function * ao_fence_marks(fence, trailing, initial, xform=_v_one) ::
  let f = true === initial
    ? fence() : initial

  while 1 ::
    let v
    if trailing ::
      v = await f
      f = fence()

    else ::
      f = fence()
      v = await f

    yield xform(v)

