import {ao_fence_v, ao_fence_marks} from './core.jsy'


export async function * ao_interval(opt) ::
  opt = Number.isFinite(opt)
    ? {ms: opt, signal: 1}
    : {signal: 1, ... opt}

  let [_fence, _reset] = ao_fence_v()
  let tid = setInterval(_reset, opt.ms || 1000)
  if tid.unref && ! opt.ref ::
    tid.unref()
  try ::
    yield * ao_fence_marks(_fence, opt)
  finally ::
    clearInterval(tid)


export async function * ao_timeout(opt) ::
  opt = Number.isFinite(opt)
    ? {ms: opt, signal: 1}
    : {signal: 1, ... opt}

  let tid, [_fence, _reset] = ao_fence_v()
  try ::
    yield * ao_fence_marks(timeout, opt)
  finally ::
    clearTimeout(tid)

  function timeout() ::
    tid = setTimeout(_reset, opt.ms || 1000)
    if tid.unref && ! opt.ref ::
      tid.unref()
    return _fence()


export async function * ao_times(gen_in) ::
  let ts0 = Date.now()
  for await let v of gen_in ::
    yield Date.now() - ts0

