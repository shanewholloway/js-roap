import {_ret_ident} from './_common.jsy'
import {iter, ao_iter, _xinvoke, _xpipe_tgt} from './util.jsy'


export async function ao_run(gen_in, notify=_ret_ident) ::
  for await let v of _xinvoke(gen_in) ::
    notify(v)


export async function ao_drive(gen_in, gen_tgt, xform=_ret_ident) ::
  gen_tgt = _xpipe_tgt(gen_tgt)
  for await let v of _xinvoke(gen_in) ::
    if undefined !== gen_tgt ::
      v = xform(v)
      let {done} = await gen_tgt.next(v)
      if done :: break


export function ao_step_iter(iterable, multiple) ::
  iterable = ao_iter(iterable)
  return @{}
    async * [Symbol.asyncIterator]() ::
      do ::
        let {value} = await iterable.next()
        yield value
      while multiple


export function step_iter(iterable, multiple) ::
  iterable = iter(iterable)
  return @{}
    *[Symbol.iterator]() ::
      do ::
        let {value} = iterable.next()
        yield value
      while multiple

