export const sym_ao = Symbol.asyncIterator
export const sym_iter = Symbol.iterator

export async function * as_ao_iter(ao_iterable) ::
  yield * ao_iterable

export function is_ao_iter(v) ::
  return v !== undefined && v !== null
    && 'function' === typeof v[sym_ao]

export function is_ao_iterable(v) ::
  return v !== undefined && v !== null
    && 'string' !== typeof v
    && 'function' === typeof (v[sym_ao] || v.next || v[sym_iter])

export function as_ao_iter_checked(ao_iterable) ::
  if ! is_ao_iterable(ao_iterable) ::
    throw new TypeError @ 'Expected an ao_iterable'

  return as_ao_iter(ao_iterable)

