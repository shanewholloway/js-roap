const {
  assign: _obj_assign,
  defineProperties: _obj_props,
} = Object;

const ao_sym_done = Symbol('ao_done');

function ao_fence_v() {
  let p=0, _resume = ()=>{};
  let _pset = a => _resume = a;

  return [
    () => 0 !== p ? p
      : p = new Promise(_pset)

  , v => {p = 0; _resume(v);} ] }



const _ao_fence_api ={
  stop() {this.fence.done = true;}

, ao_fork() {
    return ao_fence_fork(this.fence)}

, [Symbol.asyncIterator]() {
    return this.ao_fork()} };

function ao_fence_fn(tgt) {
  let f = ao_fence_v();
  if (undefined === tgt) {tgt = f[0];}
  tgt.fence = _obj_assign(tgt, _ao_fence_api);
  return f}

function ao_fence_obj(tgt) {
  let f = ao_fence_fn(tgt);
  return {__proto__: _ao_fence_api
  , fence: tgt || f[0], reset: f[1]} }


async function * ao_fence_fork(fence) {
  while (! fence.done) {
    let v = await fence();
    if (fence.done || v === ao_sym_done) {
      return v}
    yield v;} }

let f = ao_fence_obj();
let tid = setInterval(Boolean, 1000);

{(async ()=>{
  let v;
  console.log("A start", {v});
  v = await f.fence();
  console.log("A1", {v});
  v = await f.fence();
  console.log("A2", {v});
  v = await f.fence();
  console.log("A3", {v});
  v = await f.fence();
  console.log("proc A done", {v}); })();}

{(async ()=>{
  let v;
  console.log("M start", {v});
  v = await f.fence();
  console.log("M1", {v});
  v = await f.fence();
  console.log("M2", {v});
  v = await f.fence();
  console.log("M3", {v});
  v = await f.fence();
  console.log("M4", {v});
  v = await f.fence();
  console.log("proc M done", {v}); })();}

{(async ()=>{
  for await (let v of f) {
    console.log("G", {v}); }

  console.log("proc G done");
  tid = clearInterval(tid);})();}

{(async ()=>{
  for (let i=1; i<10; i++) {
    let txt = `S${i}`;
    await txt;

    console.log('');
    console.log(txt);
    f.reset(txt);
    console.log('');}

  await 0;
  console.log("S done");
  f.fence.done = true;
  f.reset('bye');
  console.log("proc S done"); })();}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
