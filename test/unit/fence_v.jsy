import {ao_fence_v} from 'roap'
import {assert, expect, delay_race} from './_utils.jsy'


describe @ 'ao_fence_v tuple', function() ::
  it @ 'shape', @::
    const res = ao_fence_v()
    expect(res).to.be.an('array').of.length(3)
    expect(res[0]).to.be.a('function')
    expect(res[1]).to.be.a('function')
    expect(res[2]).to.be.a('function')


  it @ 'basic use', @::>
    const [fence, resume] = ao_fence_v()

    const p = fence()
    assert.equal @ 'timeout', await delay_race(p,1)

    resume(1942)
    assert.equal @ 1942, await delay_race(p,1)


  it @ 'only first after', @::>
    const [fence, resume] = ao_fence_v()
    let f, fz

    resume @ 'one'
    f = fence()
    resume @ 'two'
    resume @ 'three'

    assert.equal @ 'two', await f

    resume @ 'four'
    resume @ 'five'
    f = fence()
    resume @ 'six'
    resume @ 'seven'

    assert.equal @ 'six', await f


  it @ 'never blocked on fence', @::>
    const [fence, resume] = ao_fence_v()

    resume @ 'one'
    resume @ 'two'
    resume @ 'three'


  it @ 'exercise fence', @::>
    const [fence, resume] = ao_fence_v()

    let v = 'a'
    expect(v).to.equal('a')

    const p = @!>
      v = 'b'

      :: const ans = await fence()
         expect(ans).to.equal('bb')

      v = 'c'
      :: const ans = await fence()
         expect(ans).to.equal('cc')
      v = 'd'
      return 1942

    assert.equal @ 'timeout', await delay_race(p,1)
    expect(v).to.equal('b')

    ::
      const p = resume(v+v)
      expect(p).to.be.undefined

    expect(v).to.equal('b')
    assert.equal @ 'timeout', await delay_race(p,1)
    expect(v).to.equal('c')

    ::
      const p = resume(v+v)
      expect(p).to.be.undefined

    expect(v).to.equal('c')
    assert.equal @ 1942, await delay_race(p,1)
    expect(v).to.equal('d')

