import { _ao_pipe_base } from './pipe_base.jsy'
import { _ao_pipe_src } from './pipe_src.jsy'
import { _ao_pipe_out } from './pipe_out.jsy'


export const _ao_pipe = @{}
  __proto__: _ao_pipe_base

  // xfold: v => v -- on push: identity transform
  // xpull() {} -- memory: none
  // xemit: _xinvoke -- identity transform or invoke if function

  // *xgfold() -- on push: generator-based fold impl
  // *xsrc() -- feed with source generator
  // *xctx(gen_src) -- on init: bind event sources

  api_src: _ao_pipe_src
  api_out: _ao_pipe_out


  xinit(gsrc) ::
    let xgfold = this.xgfold
    if undefined !== xgfold ::
      this._init_xgfold(gsrc, xgfold)

    this._init_chain(gsrc)


  _init_xgfold(gsrc, xgfold) ::
    if undefined === xgfold ::
      return

    if 'function' === typeof xgfold ::
      xgfold = xgfold.call(this, this)

      if 'function' === typeof xgfold ::
        this.xfold = xgfold
        return true

      xgfold.next()

    this.xgfold = xgfold
    this.xfold = this._fold_gen
    gsrc.on_fin @ xgfold
    return true

  _fold_gen(v) ::
    let {done, value} = this.xgfold.next(v)
    if done :: this.done = true
    return value


  _init_chain(gsrc) ::
    let {xsrc, xctx} = this
    if undefined !== xsrc ::
      gsrc.feed(xsrc)
        .then @=> gsrc.return()

    if undefined !== xctx ::
      gsrc.with(xctx)


export const ao_pipe = _ao_pipe.create

