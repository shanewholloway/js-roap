'use strict'

import {ao_fence_obj, ao_fence_in} from 'roap'
import {ao_dom_listen} from 'roap'


let demo_target = ao_fence_in()
  .ao_fold @:
    * xrecv(g) ::
      let ns = {}
      for let e of g ::
        ns[e.k] = e.v
          yield ns

    async * xemit(ag_out) ::
      for await let ns of ag_out ::
        yield {... ns}

  .allow_many()


ao_dom_listen(demo_target)
  .with_dom @
    document.querySelectorAll('input[type=range]')
    (elem, evt) => @: k: elem.id, v: elem.valueAsNumber
  .listen @ 'input', 'change',

console.log @: demo_target

const ao_tgt_rgb = @*>
  for await let {aaa, bbb, ccc} of demo_target ::
    let r = (aaa*.255).toFixed(1)
    let g = (bbb*.255).toFixed(1)
    let b = (ccc*.255).toFixed(1)
    yield `rgb(${r}, ${g}, ${b})`
      

const ao_tgt_hsl = @*>
  for await let {aaa, bbb, ccc} of demo_target ::
    let h = (aaa*0.36).toFixed(1)
    let s = (bbb*0.10).toFixed(1)
    let l = (ccc*0.10).toFixed(1)
    
    yield `hsl(${h}, ${s}%, ${l}%)`


::!>
  let el_rgb = document.querySelector('#tgt_rgb')
  for await let rgb of ao_tgt_rgb ::
    el_rgb.textContent = rgb
    el_rgb.style.backgroundColor = rgb

::!>
  let el_hsl = document.querySelector('#tgt_hsl')
  for await let hsl of ao_tgt_hsl ::
    el_hsl.textContent = hsl
    el_hsl.style.backgroundColor = hsl


::!>
  for await let e of demo_target ::
    console.log @ 'stream', e

