import {_obj_assign, _obj_props} from './_common.jsy'
import {_xinvoke, fn_chain} from './util.jsy'
import {ao_fence_v} from './fence.jsy'
import {ao_run} from './drive.jsy'


const _ao_tap_api = @{}
  * fork() ::
    let {fence} = this
    while ! fence.done ::
      yield fence()

  async * ao_fork() ::
    yield * this.fork()

const _ao_tap_props = @{}
  chain: @{} get() :: return fn_chain(this)

export function ao_tap(gen_in, xfn) ::
  let obj = _obj_assign @
    _obj_props @
      _ao_tap(gen_in),
      _ao_tap_props
    _ao_tap_api

  if xfn :: xfn(obj)
  return obj

export function _ao_tap(gen_in) ::
  let [fence, reset] = ao_fence_v()
  let gen = @!>*
    fence.done = false
    try ::
      for await let v of _xinvoke(gen_in) ::
        reset(v)
        yield v
    finally ::
      fence.done = true

  gen.fence = fence
  return gen



const _ao_split = @{}
  ... _ao_tap_api

  get chain() :: return fn_chain(this)

  [Symbol.iterator]() ::
    return this.fork()

  [Symbol.asyncIterator]() ::
    return this.ao_fork()

export function ao_split(gen_in, xfn) ::
  let gen = _ao_tap(gen_in)
  let obj = @{}
    __proto__: _ao_split
    fin: ao_run(gen)
    fence: gen.fence

  if xfn :: xfn(obj)
  return obj
