import {_obj_assign, _is_fn, _ret_ident} from './_common.jsy'

export const ao_sym_done = Symbol('ao_done')

export function ao_fence_v() ::
  let p=0, _resume = ()=>{}
  let _pset = a => _resume = a

  return @[]
    () => 0 !== p ? p
      : p = new Promise(_pset)

    v => :: p = 0; _resume(v)



const _ao_fence_api = @{}
  stop() :: this.fence.done = true

  ao_fork() ::
    return ao_fence_fork(this.fence)

  [Symbol.asyncIterator]() ::
    return this.ao_fork()

export function ao_fence_fn(tgt) ::
  let f = ao_fence_v()
  if undefined === tgt :: tgt = f[0]
  tgt.fence = _obj_assign @ tgt, _ao_fence_api
  return f

export function ao_fence_obj(tgt) ::
  let f = ao_fence_fn(tgt)
  return @{} __proto__: _ao_fence_api
    fence: tgt || f[0], reset: f[1]


export async function * ao_fence_fork(fence) ::
  while ! fence.done ::
    let v = await fence()
    if fence.done || v === ao_sym_done ::
      return v
    yield v


export async function * _ao_fence_loop(fence, reset, xform) ::
  try ::
    let v
    while ! fence.done ::
      v = await fence()
      if v === ao_sym_done ::
        return

      v = yield v
      if undefined !== xform ::
        v = await xform(v)
      reset @ v
  finally ::
    reset(ao_sym_done)

