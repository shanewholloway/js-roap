import {ao_check_done, _ag_copy} from './util.jsy'
import {ao_fence_o, _ao_fence_core_api_} from './fence.jsy'
import {ao_run} from './drive.jsy'


export const ao_fence_out = ao_fence_o.bind @ null, @{}
  __proto__: _ao_fence_core_api_

  [Symbol.asyncIterator]() ::
    return this.ao_bound()
  ao_bound() ::
    throw new Error('ao_fence_out not bound')
  _ao_many() ::
    throw new Error('ao_fence_out consumed; consider .ao_fork() or .allow_many()')

  allow_many() ::
    let {ao_fork, ao_bound, _ao_many} = this
    if _ao_many === ao_bound ::
      this.ao_bound = ao_fork
    this._ao_many = ao_fork
    this.allow_many = () => this
    return this

  ao_run() ::
    let {when_run} = this
    if undefined === when_run ::
      this.when_run = when_run =
        ao_run @ this.ao_bound()
    return when_run

  bind_gated(f_gate) ::
    let ag_out = this._ao_gated(f_gate)
    ag_out.f_out = this
    ag_out.g_in = this.g_in
    this.ao_bound = @::
      let {xemit, _ao_many} = this
      this.ao_bound = _ao_many
      return xemit
        ? _ag_copy @ ag_out, xemit(ag_out)
        : ag_out

    return this

  ao_gated(f_gate) ::
    return this.bind_gated(f_gate).ao_bound()

  _ao_gated(f_gate) :: return aog_gated(this, f_gate)


export async function * aog_gated(f_out, f_gate) ::
  try ::
    f_out.resume()
    while 1 ::
      let v = await f_gate.fence()
      yield v
      f_out.resume(v)
  catch err ::
    ao_check_done(err)
  finally ::
    f_out.abort()
    if f_gate.abort ::
      f_gate.abort()

