import {is_ao_fn, ao_done} from './util.jsy'
import {ao_fence_o, _ao_fence_core_api_} from './fence.jsy'
import {ao_fence_out} from './fence_out.jsy'
import {aog_iter, aog_sink} from './fence_bare.jsy'

export const ao_xform = ns_gen => ao_fence_in().ao_xform(ns_gen)
export const ao_fold = ns_gen => ao_fence_in().ao_fold(ns_gen)
export const ao_queue = ns_gen => ao_fence_in().ao_queue(ns_gen)

export const ao_fence_in = ao_fence_o.bind @ null, @{}
  __proto__: _ao_fence_core_api_

  ao_fold(ns_gen) :: return this.ao_xform @: xinit: aog_iter, ... ns_gen
  ao_queue(ns_gen) :: return this.ao_xform @: xinit: aog_sink, ... ns_gen

  aog_iter(xf) :: return aog_iter(this, xf)
  aog_sink(f_gate, xf) :: return aog_sink(this, f_gate, xf)

  ao_xform(ns_gen={}) ::
    let f_out = ao_fence_out()

    let {xemit, xinit, xrecv} =
      is_ao_fn(ns_gen)
        ? ns_gen(this, f_out)
        : ns_gen

    if undefined !== xemit ::
      f_out.xemit = xemit

    if ! xinit :: xinit = aog_sink
    let res = xinit @ this, f_out,
      xrecv ? _xf_gen.create(xrecv) : undefined

    let g_in = f_out.g_in = res.g_in || res
    return res !== g_in
      ? res // res is an output generator
      : @ // res is an input generator
          g_in.next(),
          f_out.bind_gated(this)

  // ES2015 generator api
  next(v) :: return {value: this.resume(v), done: true}
  return() :: return {value: this.abort(ao_done), done: true}
  throw(err) :: return {value: this.abort(err), done: true}


const _xf_gen = @{}
  create(xf) ::
    let self = {__proto__: this}
    self.xg = xf(self.xf_inv())
    return self

  *xf_inv() ::
    while 1 ::
      let tip = this._tip
      if this === tip ::
        throw new Error('Underflow')
      else this._tip = this

      yield tip

  next(v) ::
    this._tip = v
    return this.xg.next(v)

  return() :: this.xg.return()
  throw() :: this.xg.throw()

