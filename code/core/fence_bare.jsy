import {ao_check_done} from './util.jsy'
import {ao_fence_v} from './fence.jsy'
import {aog_gated} from './fence_out.jsy'


export const ao_feeder = ({g_in}) => v => g_in.next(v)
export const ao_feeder_v = ({g_in}) => (...args) => g_in.next(args)


export function aog_fence_xf(xinit, ...args) ::
  let f_in = ao_fence_v({}), f_out = ao_fence_v({})
  let res = aog_gated(f_out, f_in)
  let g_in = xinit(f_in, f_out, ...args)
  g_in.next()

  res.fence = f_out.fence
  res.g_in = g_in
  return res

export function ao_fence_iter(...args) ::
  return aog_fence_xf(aog_iter, ...args)

export function ao_fence_sink(...args) ::
  return aog_fence_xf(aog_sink, ...args)


export function * aog_iter(f_in, f_gate, xf) ::
  try ::
    while 1 ::
      let tip = yield
      if undefined !== xf ::
        tip = (xf.next(tip)).value
      f_in.resume(tip)

  catch err ::
    ao_check_done(err)
  finally ::
    f_in.abort()
    if undefined !== xf ::
      xf.return()


export async function * aog_sink(f_in, f_gate, xf) ::
  try ::
    while 1 ::
      ::
        let tip = yield
        if undefined !== xf ::
          tip = (await xf.next(tip)).value
        f_in.resume(tip)

      if undefined !== f_gate ::
        await f_gate.fence()

  catch err ::
    ao_check_done(err)
  finally ::
    f_in.abort()
    if undefined !== xf ::
      xf.return()

