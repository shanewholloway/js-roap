import {as_ao_iter, is_ao_iter} from './core.jsy'

export @{}
  ao_watch as default

export async function ao_watch(...args) ::
  let obj={}, ao_iter, on_update
  for const ea of args ::
    if 'function' === typeof ea ::
      on_update = ea
    else if is_ao_iter(ea) ::
      ao_iter = as_ao_iter(ea)
    else obj = ea

  return _ao_watcher @ obj, ao_iter, on_update


export async function _ao_watcher(obj, ao_iter, on_update) ::
  const {value, done} = await ao_iter.next()
  obj.value = value
  obj.done = done
  obj.tail = done ? Promise.resolve(obj)
    : _ao_watcher @ obj, ao_iter, on_update

  if undefined !== on_update ::
    await on_update @ value, obj

  return obj

export async function as_ao_watch(arg) ::
  arg = await arg
  if undefined !== arg && null !== arg ::
    if undefined !== arg.tail ::
      return arg // already an ao_watch instance

    if is_ao_iter(arg) ::
      return await _ao_watcher @ {}, as_ao_iter(arg)

  return @{} value: arg, done: true
