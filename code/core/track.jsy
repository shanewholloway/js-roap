import {ao_when_map} from './when.jsy'
import {ao_defer_v} from './defer.jsy'
import {ao_done} from './util.jsy'

export function ao_track(proto, reset_v) ::
  let r = ao_track_v(reset_v)
  return @{} __proto__: proto,
    tip: () => r[0] // or fence(false)
    resume: r[1]
    abort: r[2]
    fence: r[3]
    ftr: () => r[4] // or fence(true)

export function ao_track_v(reset_v = ()=>ao_defer_v()) ::
  // like ao_defer_v() and resetable like ao_fence_v()
  let r // r is the current / tracked value defined below
  let x=reset_v() // x is the future/deferred

  let p // p is the rachet memory for the fence() closure
  // similar to fence.fence() while also tracking the last completed deferred
  let fence = ftr => @
    false===ftr ? r[0] : true===ftr ? x[0] : // non-racheting queries
    p===x[0] || p===r[0] ? p=x[0] : p=r[0] // racheting query

  // like fence.resume, resolves the future/deferred x[0]; then resets x future/deferred
  let resume = ans => xz(x[1], ans)

  // like fence.abort, rejects the future/deferred x[0]; then resets x future/deferred
  let abort  = err => xz(x[2], err || ao_done)

  // match ao_defer_v() of [current promise, resolve, reject] with additional [fence, ftr promise]
  return r = [ p=x[0], resume, abort, fence, x[0] ]

  function xz(xf, v) ::
    // 1. update current / tip slot: r[0] = x[0]
    // 2. re-prime fence: x = reset_v(r[0]]
    x = reset_v(r[0] = x[0])
    r[4] = x[0] // update public ftr slot
    xf(v) // resume/abort r[0] current / tip

export const ao_track_when = db =>
  ao_when_map(ao_track_v, db)

