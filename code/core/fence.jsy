import {ao_defer_ctx} from './defer.jsy'
import {ao_done, ao_check_done} from './util.jsy'


export function ao_fence_v(proto) ::
  let reset = ao_defer_ctx(), x=reset(), p=0

  let fence  = () => @ 0 !== p ? p : p=(x=reset())[0]
  let resume = ans => :: p=0; x[1](ans)
  let abort  = err => :: p=0; x[2](err)

  return proto
    ? @{} __proto__: proto, fence, resume, abort
    : @[] fence, resume, abort



export const _ao_fence_core_api_ = @{}
  ao_check_done

  // copyable fence fork api
  [Symbol.asyncIterator]() ::
    return this.ao_fork()

  ao_fork() ::
    let ag = this._ao_fork()
    let {xemit} = this
    return xemit ? xemit(ag) : ag

  async * _ao_fork() ::
    let {fence} = this
    try ::
      while 1 ::
        let r = await fence()
        if undefined !== r ::
          yield r
    catch err ::
      ao_check_done(err)


export function ao_fence_fn(tgt) ::
  let f = ao_fence_v()
  if undefined === tgt :: tgt = f[0]
  tgt.fence = Object.assign(tgt, _ao_fence_core_api_)
  return f


export const ao_fence_obj =
  ao_fence_v.bind(null, _ao_fence_core_api_)

