import {_ident, _is_defined} from './_common.jsy'
import {sym_ao, as_ao_iter, as_fn} from './core.jsy'
import {ao_deferred} from './deferred_core.jsy'

const __ao_tee__ = @{}
  _xform: _ident
  xform(fn) ::
    this._xform = as_fn(fn)
    return this

  watch(fn) ::
    this._update = @
      false === fn
        ? _is_defined
        : as_fn(fn, _ident)
    return this


export function ao_tee(ao_source) ::
  ao_source = as_ao_iter(ao_source)

  const ao_tee = @{}
    __proto__: __ao_tee__
    tip: undefined
    done: undefined
    ao_source

  const aod = ao_deferred @\ ao_update ::>
    for await let tip of ao_source ::
      const {_xform, _update} = ao_tee
      tip = _xform @ tip

      ao_update(tip)
      if undefined !== _update ::
        ao_tee.done = false
        ao_tee.tip = _update(tip)

      aod.reset()


    ao_tee.done = true

  ao_tee[sym_ao] = aod[sym_ao]
  return ao_tee

