import {_obj_assign, _obj_props} from './_common.jsy'
import {_xinvoke, fn_chain} from './util.jsy'
import {ao_fence_v, ao_fence_fork} from './fence.jsy'
import {ao_run} from './drive.jsy'


function ao_fork() ::
  return ao_fence_fork(this.fence)

const _ao_tap_props = @{}
  ao_fork: @{} value: ao_fork
  chain: @{} get() ::
    return fn_chain(this, this)

export function ao_tap(ag_out) ::
  return _obj_props @ _ao_tap(ag_out), _ao_tap_props

export function _ao_tap(ag_out) ::
  let [fence, reset] = ao_fence_v()
  let gen = @!>*
    fence.done = false
    try ::
      for await let v of _xinvoke(ag_out) ::
        reset(v)
        yield v
    finally ::
      fence.done = true
      reset()

  gen.fence = fence
  return gen



const _ao_split_api = @{}
  get chain() ::
    return fn_chain(this, this)
  [Symbol.asyncIterator]: ao_fork
  ao_fork

export function ao_split(ag_out) ::
  let gen = _ao_tap(ag_out)
  return @{}
    __proto__: _ao_split_api
    fin: ao_run(gen)
    fence: gen.fence

