const is_ao_iter = g =>
  null != g[Symbol.asyncIterator];

const is_ao_fn = v_fn =>
  'function' === typeof v_fn
    && ! is_ao_iter(v_fn);


const ao_done$1 = Object.freeze({ao_done: true});
const ao_check_done = err => {
  if (err !== ao_done$1 && err && !err.ao_done) {
    throw err}
  return true};


const _ag_copy = ({g_in}, ag_out) =>(
  undefined === g_in ? ag_out :(
    ag_out.g_in = g_in
  , ag_out) );

function ao_defer_ctx(as_res = (...args) => args) {
  let y,n,_pset = (a,b) => { y=a, n=b; };
  return p =>(
    p = new Promise(_pset)
  , as_res(p, y, n)) }

async function ao_run(gen_in) {
  for await (let v of gen_in) {} }

function ao_fence_v(proto) {
  let x, p0, p=0, reset=ao_defer_ctx();

  let fence  = at =>(0===at ? p0 : 0!==p ? p : p=(x=reset())[0]);
  let resume = ans => xz(x[1], ans);
  let abort  = err => xz(x[2], err || ao_done$1);

  p0 = fence(); // initialize x, p, and p0
  return proto
    ?{__proto__: proto, fence, resume, abort}
    :[fence, resume, abort]

  function xz(xf, v) {
    if (0!==p) {
      p0 = p; p = 0;
      xf(v);} } }

async function * ao_iter_fence(fence) {
  try {
    while (1) {
      let r = await fence();
      if (undefined !== r) {
        yield r;} } }
  catch (err) {
    ao_check_done(err);} }



const _ao_fence_core_api_ = {
  ao_check_done

, // copyable fence fork api
  [Symbol.asyncIterator]() {
    return this.ao_fork()}

, ao_fork() {
    let ag = ao_iter_fence(this.fence);
    let {xemit} = this;
    return xemit ? xemit(ag) : ag} };

const ao_fence_out = /* #__PURE__ */ ao_fence_v.bind(null,{
  __proto__: _ao_fence_core_api_

, [Symbol.asyncIterator]() {
    return this.ao_bound()}
, ao_bound() {
    throw new Error('ao_fence_out not bound')}
, _ao_many() {
    throw new Error('ao_fence_out consumed; consider .ao_fork() or .allow_many()')}

, allow_many() {
    let {ao_fork, ao_bound, _ao_many} = this;
    if (_ao_many === ao_bound) {
      this.ao_bound = ao_fork;}
    this._ao_many = ao_fork;
    this.allow_many = () => this;
    return this}

, ao_run() {
    let {when_run} = this;
    if (undefined === when_run) {
      this.when_run = when_run =
        ao_run(this.ao_bound()); }
    return when_run}

, bind_gated(f_gate) {
    let ag_out = this._ao_gated(f_gate);
    ag_out.f_out = this;
    ag_out.g_in = this.g_in;
    this.ao_bound = (() => {
      let {xemit, _ao_many} = this;
      this.ao_bound = _ao_many;
      return xemit
        ? _ag_copy(ag_out, xemit(ag_out))
        : ag_out});

    return this}

, ao_gated(f_gate) {
    return this.bind_gated(f_gate).ao_bound()}

, _ao_gated(f_gate) {return aog_gated(this, f_gate)} } );


async function * aog_gated(f_out, f_gate) {
  try {
    f_out.resume();
    while (1) {
      let v = await f_gate.fence();
      yield v;
      f_out.resume(v);} }
  catch (err) {
    ao_check_done(err);}
  finally {
    f_out.abort();
    if (f_gate.abort) {
      f_gate.abort();} } }


function * aog_iter(f_in, f_gate, xf) {
  try {
    while (1) {
      let tip = yield;
      if (undefined !== xf) {
        tip = (xf.next(tip)).value;}
      f_in.resume(tip);} }

  catch (err) {
    ao_check_done(err);}
  finally {
    f_in.abort();
    if (undefined !== xf) {
      xf.return();} } }


async function * aog_sink(f_in, f_gate, xf) {
  try {
    while (1) {
       {
        let tip = yield;
        if (undefined !== xf) {
          tip = (await xf.next(tip)).value;}
        f_in.resume(tip);}

      if (undefined !== f_gate) {
        await f_gate.fence();} } }

  catch (err) {
    ao_check_done(err);}
  finally {
    f_in.abort();
    if (undefined !== xf) {
      xf.return();} } }
const ao_queue = ns_gen => ao_fence_in().ao_queue(ns_gen);

const ao_fence_in = /* #__PURE__ */ ao_fence_v.bind(null,{
  __proto__: _ao_fence_core_api_

, ao_fold(ns_gen) {return this.ao_xform({xinit: aog_iter, ... ns_gen})}
, ao_queue(ns_gen) {return this.ao_xform({xinit: aog_sink, ... ns_gen})}

, aog_iter(xf) {return aog_iter(this)}
, aog_sink(f_gate, xf) {return aog_sink(this, f_gate, xf)}

, ao_xform(ns_gen={}) {
    let f_out = ao_fence_out();

    let {xemit, xinit, xrecv} =
      is_ao_fn(ns_gen)
        ? ns_gen(this, f_out)
        : ns_gen;

    if (undefined !== xemit) {
      f_out.xemit = xemit;}

    if (! xinit) {xinit = aog_sink;}
    let res = xinit(this, f_out,
      xrecv ? _xf_gen.create(xrecv) : undefined);

    let g_in = f_out.g_in = res.g_in || res;
    return res !== g_in
      ? res // res is an output generator
      :(// res is an input generator
          g_in.next(),
          f_out.bind_gated(this)) }

, // ES2015 generator api
  next(v) {return {value: this.resume(v), done: true}}
, return() {return {value: this.abort(ao_done$1), done: true}}
, throw(err) {return {value: this.abort(err), done: true}} } );


const _xf_gen = {
  create(xf) {
    let self = {__proto__: this};
    self.xg = xf(self.xf_inv());
    return self}

, *xf_inv() {
    while (1) {
      let tip = this._tip;
      if (this === tip) {
        throw new Error('Underflow')}
      else this._tip = this;

      yield tip;} }

, next(v) {
    this._tip = v;
    return this.xg.next(v)}

, return() {this.xg.return();}
, throw() {this.xg.throw();} };

const _evt_init = Promise.resolve({type:'init'});
function ao_dom_listen(self=ao_queue()) {
  return _bind.self = self ={
    __proto__: self
  , with_dom(dom, fn) {
      return dom.addEventListener
        ? _ao_with_dom(_bind, fn, dom)
        : _ao_with_dom_vec(_bind, fn, dom)} }

  function _bind(dom, fn_evt, fn_dom) {
    return evt => {
      let v = fn_evt
        ? fn_evt(evt, dom, fn_dom)
        : fn_dom(dom, evt);

      if (null != v) {
        self.g_in.next(v);} } } }


function _ao_with_dom(_bind, fn, dom) {
  let _on_evt;
  if (is_ao_fn(fn)) {
    _evt_init.then(
      _on_evt = _bind(dom, void 0, fn)); }

  return {
    __proto__: _bind.self
  , listen(...args) {
      let opt, evt_fn = _on_evt;

      let last = args.pop();
      if ('function' === typeof last) {
        evt_fn = _bind(dom, last, _on_evt);
        last = args.pop();}

      if ('string' === typeof last) {
        args.push(last);}
      else opt = last;

      for (let evt of args) {
        dom.addEventListener(
          evt, evt_fn, opt); }

      return this} } }


function _ao_with_dom_vec(_bind, fn, ectx_list) {
  ectx_list = Array.from(ectx_list,
    dom => _ao_with_dom(_bind, fn, dom));

  return {
    __proto__: _bind.self
  , listen(...args) {
      for (let ectx of ectx_list) {
        ectx.listen(...args);}
      return this} } }

let demo_target = ao_fence_in()
  .ao_fold({
    * xrecv(g) {
      let ns = {};
      for (let e of g) {
        ns[e.k] = e.v;
          yield ns;} }

  , async * xemit(ag_out) {
      for await (let ns of ag_out) {
        yield {... ns};} } })

  .allow_many();


ao_dom_listen(demo_target)
  .with_dom(
    document.querySelectorAll('input[type=range]')
  , (elem, evt) =>({k: elem.id, v: elem.valueAsNumber}) )
  .listen('input', 'change',);

console.log({demo_target});

const ao_tgt_rgb = ((async function *(){
  for await (let {aaa, bbb, ccc} of demo_target) {
    let r = (aaa*.255).toFixed(1);
    let g = (bbb*.255).toFixed(1);
    let b = (ccc*.255).toFixed(1);
    yield `rgb(${r}, ${g}, ${b})`;} }).call(undefined));


const ao_tgt_hsl = ((async function *(){
  for await (let {aaa, bbb, ccc} of demo_target) {
    let h = (aaa*0.36).toFixed(1);
    let s = (bbb*0.10).toFixed(1);
    let l = (ccc*0.10).toFixed(1);

    yield `hsl(${h}, ${s}%, ${l}%)`;} }).call(undefined));


{(async ()=>{
  let el_rgb = document.querySelector('#tgt_rgb');
  for await (let rgb of ao_tgt_rgb) {
    el_rgb.textContent = rgb;
    el_rgb.style.backgroundColor = rgb;} })();}

{(async ()=>{
  let el_hsl = document.querySelector('#tgt_hsl');
  for await (let hsl of ao_tgt_hsl) {
    el_hsl.textContent = hsl;
    el_hsl.style.backgroundColor = hsl;} })();}


{(async ()=>{
  for await (let e of demo_target) {
    console.log('stream', e); } })();}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tX2lucHV0Lm1qcyIsInNvdXJjZXMiOlsiLi4vLi4vZXNtL3JvYXAubWpzIiwiLi4vZG9tX2lucHV0LmpzeSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpc19hb19pdGVyID0gZyA9PlxuICBudWxsICE9IGdbU3ltYm9sLmFzeW5jSXRlcmF0b3JdO1xuXG5jb25zdCBpc19hb19mbiA9IHZfZm4gPT5cbiAgJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHZfZm5cbiAgICAmJiAhIGlzX2FvX2l0ZXIodl9mbik7XG5cblxuY29uc3QgYW9fZG9uZSQxID0gT2JqZWN0LmZyZWV6ZSh7YW9fZG9uZTogdHJ1ZX0pO1xuY29uc3QgYW9fY2hlY2tfZG9uZSA9IGVyciA9PiB7XG4gIGlmIChlcnIgIT09IGFvX2RvbmUkMSAmJiBlcnIgJiYgIWVyci5hb19kb25lKSB7XG4gICAgdGhyb3cgZXJyfVxuICByZXR1cm4gdHJ1ZX07XG5cblxuY29uc3QgX2FnX2NvcHkgPSAoe2dfaW59LCBhZ19vdXQpID0+KFxuICB1bmRlZmluZWQgPT09IGdfaW4gPyBhZ19vdXQgOihcbiAgICBhZ19vdXQuZ19pbiA9IGdfaW5cbiAgLCBhZ19vdXQpICk7XG5cbmZ1bmN0aW9uIGFvX3doZW5fbWFwKGFvX2ZuX3YsIGRiPW5ldyBNYXAoKSkge1xuICBsZXQgYXQgPSBrID0+IHtcbiAgICBsZXQgZSA9IGRiLmdldChrKTtcbiAgICBpZiAodW5kZWZpbmVkID09PSBlKSB7XG4gICAgICBkYi5zZXQoaywgZT1hb19mbl92KCkpO31cbiAgICByZXR1cm4gZX07XG5cbiAgbGV0IGRlZmluZSA9IChrLCB2KSA9PiB7XG4gICAgbGV0IFtyLCBmbl0gPSBhdChrKTtcbiAgICBmbih2KTsgLy8gZS5nLiBkZWZlcnJlZCByZXNvbHZlIG9yIGZlbmNlIHJlc3VtZSgpXG4gICAgcmV0dXJuIHJ9O1xuXG4gIHJldHVybiB7XG4gICAgaGFzOiBrID0+IGRiLmhhcyhrKVxuICAsIGdldDogayA9PiBhdChrKVswXVxuICAsIHNldDogZGVmaW5lLCBkZWZpbmV9IH1cblxuZnVuY3Rpb24gYW9fZGVmZXJfY3R4KGFzX3JlcyA9ICguLi5hcmdzKSA9PiBhcmdzKSB7XG4gIGxldCB5LG4sX3BzZXQgPSAoYSxiKSA9PiB7IHk9YSwgbj1iOyB9O1xuICByZXR1cm4gcCA9PihcbiAgICBwID0gbmV3IFByb21pc2UoX3BzZXQpXG4gICwgYXNfcmVzKHAsIHksIG4pKSB9XG5cbmNvbnN0IGFvX2RlZmVyX3YgPSAvKiAjX19QVVJFX18gKi8gYW9fZGVmZXJfY3R4KCk7XG5cbmNvbnN0IGFvX2RlZmVyID0gLyogI19fUFVSRV9fICovXG4gIGFvX2RlZmVyX2N0eCgocCx5LG4pID0+XG4gICAgKHtwcm9taXNlOiBwLCByZXNvbHZlOiB5LCByZWplY3Q6IG59KSk7XG5cblxuZnVuY3Rpb24gYW9fdHJhY2tfdihzdGVwLCByZXNldF92PWFvX2RlZmVyX3YpIHtcbiAgbGV0IHIsIHAsIHg9cmVzZXRfdigpO1xuICBsZXQgcmVzdW1lID0gYW5zID0+IHh6KHhbMV0sIGFucyk7XG4gIGxldCBhYm9ydCAgPSBlcnIgPT4geHooeFsyXSwgZXJyIHx8IGFvX2RvbmUpO1xuICByZXR1cm4gciA9W3A9eFswXSwgcmVzdW1lLCBhYm9ydF1cblxuICBmdW5jdGlvbiB4eih4Ziwgdikge1xuICAgIGxldCBwMCA9IHJbMF0gPSBwO1xuICAgIHAgPSAoeCA9IHJlc2V0X3YoKSlbMF07XG4gICAgeGYodik7XG4gICAgaWYgKHN0ZXApIHtzdGVwKHAwLCBwKTt9IH0gfVxuXG5cbmNvbnN0IGFvX3RyYWNrX3doZW4gPSBkYiA9PlxuICBhb193aGVuX21hcChhb190cmFja192LCBkYik7XG5cbmNvbnN0IGFvX3doZW4gPSBkYiA9PlxuICBhb193aGVuX21hcChhb19kZWZlcl92LCBkYik7XG5cbmFzeW5jIGZ1bmN0aW9uIGFvX3J1bihnZW5faW4pIHtcbiAgZm9yIGF3YWl0IChsZXQgdiBvZiBnZW5faW4pIHt9IH1cblxuXG5hc3luYyBmdW5jdGlvbiBhb19kcml2ZShnZW5faW4sIGdlbl90Z3QsIGNsb3NlX3RndCkge1xuICBpZiAoaXNfYW9fZm4oZ2VuX3RndCkpIHtcbiAgICBnZW5fdGd0ID0gZ2VuX3RndCgpO1xuICAgIGdlbl90Z3QubmV4dCgpO31cblxuICBmb3IgYXdhaXQgKGxldCB2IG9mIGdlbl9pbikge1xuICAgIGxldCB7ZG9uZX0gPSBhd2FpdCBnZW5fdGd0Lm5leHQodik7XG4gICAgaWYgKGRvbmUpIHticmVha30gfVxuXG4gIGlmIChjbG9zZV90Z3QpIHtcbiAgICBhd2FpdCBnZW5fdGd0LnJldHVybigpO30gfVxuXG5cblxuZnVuY3Rpb24gKiBpdGVyKGl0ZXJhYmxlKSB7XG4gIHJldHVybiAoeWllbGQgKiBpdGVyYWJsZSl9XG5cbmZ1bmN0aW9uIGFvX3N0ZXBfaXRlcihpdGVyYWJsZSwgb3JfbW9yZSkge1xuICBpdGVyYWJsZSA9IGFvX2l0ZXIoaXRlcmFibGUpO1xuICByZXR1cm4ge1xuICAgIGFzeW5jICogW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgbGV0IHt2YWx1ZSwgZG9uZX0gPSBhd2FpdCBpdGVyYWJsZS5uZXh0KCk7XG4gICAgICAgIGlmIChkb25lKSB7cmV0dXJuIHZhbHVlfVxuICAgICAgICB5aWVsZCB2YWx1ZTt9XG4gICAgICB3aGlsZSAob3JfbW9yZSkgfSB9IH1cblxuXG5mdW5jdGlvbiBzdGVwX2l0ZXIoaXRlcmFibGUsIG9yX21vcmUpIHtcbiAgaXRlcmFibGUgPSBpdGVyKGl0ZXJhYmxlKTtcbiAgcmV0dXJuIHtcbiAgICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGxldCB7dmFsdWUsIGRvbmV9ID0gaXRlcmFibGUubmV4dCgpO1xuICAgICAgICBpZiAoZG9uZSkge3JldHVybiB2YWx1ZX1cbiAgICAgICAgeWllbGQgdmFsdWU7fVxuICAgICAgd2hpbGUgKG9yX21vcmUpIH0gfSB9XG5cblxuYXN5bmMgZnVuY3Rpb24gKiBhb19pdGVyKGl0ZXJhYmxlKSB7XG4gIHJldHVybiAoeWllbGQgKiBpdGVyYWJsZSl9XG5cblxuYXN5bmMgZnVuY3Rpb24gKiBfYW9faXRlcl9mZW5jZWQoaXRlcmFibGUsIGZfZ2F0ZSwgaW5pdGlhbD1mYWxzZSkge1xuICBsZXQgZiA9IHRydWUgPT09IGluaXRpYWwgPyBmX2dhdGUuZmVuY2UoKSA6IGluaXRpYWw7XG4gIGZvciBhd2FpdCAobGV0IHYgb2YgaXRlcmFibGUpIHtcbiAgICBhd2FpdCBmO1xuICAgIHlpZWxkIHY7XG4gICAgZiA9IGZfZ2F0ZS5mZW5jZSgpO30gfVxuXG5cbmNvbnN0IGFvX2l0ZXJfZmVuY2VkID0gKC4uLmFyZ3MpID0+XG4gIF9hZ19jb3B5KGFyZ3NbMF0sIF9hb19pdGVyX2ZlbmNlZCguLi5hcmdzKSk7XG5cbmZ1bmN0aW9uIGFvX2ZlbmNlX3YocHJvdG8pIHtcbiAgbGV0IHgsIHAwLCBwPTAsIHJlc2V0PWFvX2RlZmVyX2N0eCgpO1xuXG4gIGxldCBmZW5jZSAgPSBhdCA9PigwPT09YXQgPyBwMCA6IDAhPT1wID8gcCA6IHA9KHg9cmVzZXQoKSlbMF0pO1xuICBsZXQgcmVzdW1lID0gYW5zID0+IHh6KHhbMV0sIGFucyk7XG4gIGxldCBhYm9ydCAgPSBlcnIgPT4geHooeFsyXSwgZXJyIHx8IGFvX2RvbmUkMSk7XG5cbiAgcDAgPSBmZW5jZSgpOyAvLyBpbml0aWFsaXplIHgsIHAsIGFuZCBwMFxuICByZXR1cm4gcHJvdG9cbiAgICA/e19fcHJvdG9fXzogcHJvdG8sIGZlbmNlLCByZXN1bWUsIGFib3J0fVxuICAgIDpbZmVuY2UsIHJlc3VtZSwgYWJvcnRdXG5cbiAgZnVuY3Rpb24geHooeGYsIHYpIHtcbiAgICBpZiAoMCE9PXApIHtcbiAgICAgIHAwID0gcDsgcCA9IDA7XG4gICAgICB4Zih2KTt9IH0gfVxuXG5jb25zdCBhb19mZW5jZV93aGVuID0gZGIgPT5cbiAgYW9fd2hlbl9tYXAoYW9fZmVuY2VfdiwgZGIpO1xuXG5hc3luYyBmdW5jdGlvbiAqIGFvX2l0ZXJfZmVuY2UoZmVuY2UpIHtcbiAgdHJ5IHtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgbGV0IHIgPSBhd2FpdCBmZW5jZSgpO1xuICAgICAgaWYgKHVuZGVmaW5lZCAhPT0gcikge1xuICAgICAgICB5aWVsZCByO30gfSB9XG4gIGNhdGNoIChlcnIpIHtcbiAgICBhb19jaGVja19kb25lKGVycik7fSB9XG5cblxuXG5jb25zdCBfYW9fZmVuY2VfY29yZV9hcGlfID0ge1xuICBhb19jaGVja19kb25lXG5cbiwgLy8gY29weWFibGUgZmVuY2UgZm9yayBhcGlcbiAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gdGhpcy5hb19mb3JrKCl9XG5cbiwgYW9fZm9yaygpIHtcbiAgICBsZXQgYWcgPSBhb19pdGVyX2ZlbmNlKHRoaXMuZmVuY2UpO1xuICAgIGxldCB7eGVtaXR9ID0gdGhpcztcbiAgICByZXR1cm4geGVtaXQgPyB4ZW1pdChhZykgOiBhZ30gfTtcblxuXG5mdW5jdGlvbiBhb19mZW5jZV9mbih0Z3QpIHtcbiAgbGV0IGYgPSBhb19mZW5jZV92KCk7XG4gIGlmICh1bmRlZmluZWQgPT09IHRndCkge3RndCA9IGZbMF07fVxuICB0Z3QuZmVuY2UgPSBPYmplY3QuYXNzaWduKHRndCwgX2FvX2ZlbmNlX2NvcmVfYXBpXyk7XG4gIHJldHVybiBmfVxuXG5cbmNvbnN0IGFvX2ZlbmNlX29iaiA9IC8qICNfX1BVUkVfXyAqL1xuICBhb19mZW5jZV92LmJpbmQobnVsbCwgX2FvX2ZlbmNlX2NvcmVfYXBpXyk7XG5cblxuZnVuY3Rpb24gYXNfaXRlcl9wcm90byhyZXN1bWUsIGFib3J0LCBkb25lID0gdHJ1ZSkge1xuICByZXR1cm4ge1xuICAgIG5leHQ6IHYgPT4oe3ZhbHVlOiByZXN1bWUodiksIGRvbmV9KVxuICAsIHJldHVybjogKCkgPT4oe3ZhbHVlOiBhYm9ydChhb19kb25lJDEpLCBkb25lfSlcbiAgLCB0aHJvdzogKGVycikgPT4oe3ZhbHVlOiBhYm9ydChlcnIpLCBkb25lfSkgfSB9XG5cbmZ1bmN0aW9uIGFvX3NwbGl0KGl0ZXJhYmxlKSB7XG4gIGxldCBmX291dCA9IGFvX2ZlbmNlX29iaigpO1xuICBmX291dC53aGVuX3J1biA9IF9hb19ydW4oaXRlcmFibGUsIGZfb3V0KTtcbiAgZl9vdXQuZ19pbiA9IGl0ZXJhYmxlLmdfaW47XG4gIHJldHVybiBmX291dH1cblxuYXN5bmMgZnVuY3Rpb24gX2FvX3J1bihpdGVyYWJsZSwgZl90YXApIHtcbiAgdHJ5IHtcbiAgICBmb3IgYXdhaXQgKGxldCB2IG9mIGl0ZXJhYmxlKSB7XG4gICAgICBmX3RhcC5yZXN1bWUodik7fSB9XG5cbiAgY2F0Y2ggKGVycikge1xuICAgIGFvX2NoZWNrX2RvbmUoZXJyKTt9XG5cbiAgZmluYWxseSB7XG4gICAgZl90YXAuYWJvcnQoKTt9IH1cblxuXG5mdW5jdGlvbiBhb190YXAoaXRlcmFibGUpIHtcbiAgbGV0IGZfdGFwID0gYW9fZmVuY2Vfb2JqKCk7XG4gIGxldCBhZ190YXAgPSBfYW9fdGFwKGl0ZXJhYmxlLCBmX3RhcCk7XG4gIGFnX3RhcC5mX3RhcCA9IGFnX3RhcC5mX291dCA9IGZfdGFwO1xuICBhZ190YXAuZ19pbiA9IGZfdGFwLmdfaW4gPSBpdGVyYWJsZS5nX2luO1xuICByZXR1cm4gW2ZfdGFwLCBhZ190YXBdfVxuXG5hc3luYyBmdW5jdGlvbiAqIF9hb190YXAoaXRlcmFibGUsIGZfdGFwKSB7XG4gIHRyeSB7XG4gICAgZm9yIGF3YWl0IChsZXQgdiBvZiBpdGVyYWJsZSkge1xuICAgICAgZl90YXAucmVzdW1lKHYpO1xuICAgICAgeWllbGQgdjt9IH1cblxuICBjYXRjaCAoZXJyKSB7XG4gICAgYW9fY2hlY2tfZG9uZShlcnIpO31cblxuICBmaW5hbGx5IHtcbiAgICBmX3RhcC5hYm9ydCgpO30gfVxuXG5jb25zdCBhb19mZW5jZV9vdXQgPSAvKiAjX19QVVJFX18gKi8gYW9fZmVuY2Vfdi5iaW5kKG51bGwse1xuICBfX3Byb3RvX186IF9hb19mZW5jZV9jb3JlX2FwaV9cblxuLCBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIHJldHVybiB0aGlzLmFvX2JvdW5kKCl9XG4sIGFvX2JvdW5kKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignYW9fZmVuY2Vfb3V0IG5vdCBib3VuZCcpfVxuLCBfYW9fbWFueSgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2FvX2ZlbmNlX291dCBjb25zdW1lZDsgY29uc2lkZXIgLmFvX2ZvcmsoKSBvciAuYWxsb3dfbWFueSgpJyl9XG5cbiwgYWxsb3dfbWFueSgpIHtcbiAgICBsZXQge2FvX2ZvcmssIGFvX2JvdW5kLCBfYW9fbWFueX0gPSB0aGlzO1xuICAgIGlmIChfYW9fbWFueSA9PT0gYW9fYm91bmQpIHtcbiAgICAgIHRoaXMuYW9fYm91bmQgPSBhb19mb3JrO31cbiAgICB0aGlzLl9hb19tYW55ID0gYW9fZm9yaztcbiAgICB0aGlzLmFsbG93X21hbnkgPSAoKSA9PiB0aGlzO1xuICAgIHJldHVybiB0aGlzfVxuXG4sIGFvX3J1bigpIHtcbiAgICBsZXQge3doZW5fcnVufSA9IHRoaXM7XG4gICAgaWYgKHVuZGVmaW5lZCA9PT0gd2hlbl9ydW4pIHtcbiAgICAgIHRoaXMud2hlbl9ydW4gPSB3aGVuX3J1biA9XG4gICAgICAgIGFvX3J1bih0aGlzLmFvX2JvdW5kKCkpOyB9XG4gICAgcmV0dXJuIHdoZW5fcnVufVxuXG4sIGJpbmRfZ2F0ZWQoZl9nYXRlKSB7XG4gICAgbGV0IGFnX291dCA9IHRoaXMuX2FvX2dhdGVkKGZfZ2F0ZSk7XG4gICAgYWdfb3V0LmZfb3V0ID0gdGhpcztcbiAgICBhZ19vdXQuZ19pbiA9IHRoaXMuZ19pbjtcbiAgICB0aGlzLmFvX2JvdW5kID0gKCgpID0+IHtcbiAgICAgIGxldCB7eGVtaXQsIF9hb19tYW55fSA9IHRoaXM7XG4gICAgICB0aGlzLmFvX2JvdW5kID0gX2FvX21hbnk7XG4gICAgICByZXR1cm4geGVtaXRcbiAgICAgICAgPyBfYWdfY29weShhZ19vdXQsIHhlbWl0KGFnX291dCkpXG4gICAgICAgIDogYWdfb3V0fSk7XG5cbiAgICByZXR1cm4gdGhpc31cblxuLCBhb19nYXRlZChmX2dhdGUpIHtcbiAgICByZXR1cm4gdGhpcy5iaW5kX2dhdGVkKGZfZ2F0ZSkuYW9fYm91bmQoKX1cblxuLCBfYW9fZ2F0ZWQoZl9nYXRlKSB7cmV0dXJuIGFvZ19nYXRlZCh0aGlzLCBmX2dhdGUpfSB9ICk7XG5cblxuYXN5bmMgZnVuY3Rpb24gKiBhb2dfZ2F0ZWQoZl9vdXQsIGZfZ2F0ZSkge1xuICB0cnkge1xuICAgIGZfb3V0LnJlc3VtZSgpO1xuICAgIHdoaWxlICgxKSB7XG4gICAgICBsZXQgdiA9IGF3YWl0IGZfZ2F0ZS5mZW5jZSgpO1xuICAgICAgeWllbGQgdjtcbiAgICAgIGZfb3V0LnJlc3VtZSh2KTt9IH1cbiAgY2F0Y2ggKGVycikge1xuICAgIGFvX2NoZWNrX2RvbmUoZXJyKTt9XG4gIGZpbmFsbHkge1xuICAgIGZfb3V0LmFib3J0KCk7XG4gICAgaWYgKGZfZ2F0ZS5hYm9ydCkge1xuICAgICAgZl9nYXRlLmFib3J0KCk7fSB9IH1cblxuY29uc3QgYW9fZmVlZGVyID0gKHtnX2lufSkgPT4gdiA9PiBnX2luLm5leHQodik7XG5jb25zdCBhb19mZWVkZXJfdiA9ICh7Z19pbn0pID0+ICguLi5hcmdzKSA9PiBnX2luLm5leHQoYXJncyk7XG5cblxuZnVuY3Rpb24gYW9nX2ZlbmNlX3hmKHhpbml0LCAuLi5hcmdzKSB7XG4gIGxldCBmX2luID0gYW9fZmVuY2Vfdih7fSksIGZfb3V0ID0gYW9fZmVuY2Vfdih7fSk7XG4gIGxldCBnX2luID0geGluaXQoZl9pbiwgZl9vdXQsIC4uLmFyZ3MpO1xuICBnX2luLm5leHQoKTtcblxuICBsZXQgcmVzID0gYW9nX2dhdGVkKGZfb3V0LCBmX2luKTtcbiAgcmVzLmZlbmNlID0gZl9vdXQuZmVuY2U7XG4gIHJlcy5nX2luID0gZ19pbjtcbiAgcmV0dXJuIHJlc31cblxuZnVuY3Rpb24gYW9fZmVuY2VfaXRlciguLi5hcmdzKSB7XG4gIHJldHVybiBhb2dfZmVuY2VfeGYoYW9nX2l0ZXIsIC4uLmFyZ3MpfVxuXG5mdW5jdGlvbiBhb19mZW5jZV9zaW5rKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGFvZ19mZW5jZV94Zihhb2dfc2luaywgLi4uYXJncyl9XG5cblxuZnVuY3Rpb24gKiBhb2dfaXRlcihmX2luLCBmX2dhdGUsIHhmKSB7XG4gIHRyeSB7XG4gICAgd2hpbGUgKDEpIHtcbiAgICAgIGxldCB0aXAgPSB5aWVsZDtcbiAgICAgIGlmICh1bmRlZmluZWQgIT09IHhmKSB7XG4gICAgICAgIHRpcCA9ICh4Zi5uZXh0KHRpcCkpLnZhbHVlO31cbiAgICAgIGZfaW4ucmVzdW1lKHRpcCk7fSB9XG5cbiAgY2F0Y2ggKGVycikge1xuICAgIGFvX2NoZWNrX2RvbmUoZXJyKTt9XG4gIGZpbmFsbHkge1xuICAgIGZfaW4uYWJvcnQoKTtcbiAgICBpZiAodW5kZWZpbmVkICE9PSB4Zikge1xuICAgICAgeGYucmV0dXJuKCk7fSB9IH1cblxuXG5hc3luYyBmdW5jdGlvbiAqIGFvZ19zaW5rKGZfaW4sIGZfZ2F0ZSwgeGYpIHtcbiAgdHJ5IHtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgIHtcbiAgICAgICAgbGV0IHRpcCA9IHlpZWxkO1xuICAgICAgICBpZiAodW5kZWZpbmVkICE9PSB4Zikge1xuICAgICAgICAgIHRpcCA9IChhd2FpdCB4Zi5uZXh0KHRpcCkpLnZhbHVlO31cbiAgICAgICAgZl9pbi5yZXN1bWUodGlwKTt9XG5cbiAgICAgIGlmICh1bmRlZmluZWQgIT09IGZfZ2F0ZSkge1xuICAgICAgICBhd2FpdCBmX2dhdGUuZmVuY2UoKTt9IH0gfVxuXG4gIGNhdGNoIChlcnIpIHtcbiAgICBhb19jaGVja19kb25lKGVycik7fVxuICBmaW5hbGx5IHtcbiAgICBmX2luLmFib3J0KCk7XG4gICAgaWYgKHVuZGVmaW5lZCAhPT0geGYpIHtcbiAgICAgIHhmLnJldHVybigpO30gfSB9XG5cbmNvbnN0IGFvX3hmb3JtID0gbnNfZ2VuID0+IGFvX2ZlbmNlX2luKCkuYW9feGZvcm0obnNfZ2VuKTtcbmNvbnN0IGFvX2ZvbGQgPSBuc19nZW4gPT4gYW9fZmVuY2VfaW4oKS5hb19mb2xkKG5zX2dlbik7XG5jb25zdCBhb19xdWV1ZSA9IG5zX2dlbiA9PiBhb19mZW5jZV9pbigpLmFvX3F1ZXVlKG5zX2dlbik7XG5cbmNvbnN0IGFvX2ZlbmNlX2luID0gLyogI19fUFVSRV9fICovIGFvX2ZlbmNlX3YuYmluZChudWxsLHtcbiAgX19wcm90b19fOiBfYW9fZmVuY2VfY29yZV9hcGlfXG5cbiwgYW9fZm9sZChuc19nZW4pIHtyZXR1cm4gdGhpcy5hb194Zm9ybSh7eGluaXQ6IGFvZ19pdGVyLCAuLi4gbnNfZ2VufSl9XG4sIGFvX3F1ZXVlKG5zX2dlbikge3JldHVybiB0aGlzLmFvX3hmb3JtKHt4aW5pdDogYW9nX3NpbmssIC4uLiBuc19nZW59KX1cblxuLCBhb2dfaXRlcih4Zikge3JldHVybiBhb2dfaXRlcih0aGlzKX1cbiwgYW9nX3NpbmsoZl9nYXRlLCB4Zikge3JldHVybiBhb2dfc2luayh0aGlzLCBmX2dhdGUsIHhmKX1cblxuLCBhb194Zm9ybShuc19nZW49e30pIHtcbiAgICBsZXQgZl9vdXQgPSBhb19mZW5jZV9vdXQoKTtcblxuICAgIGxldCB7eGVtaXQsIHhpbml0LCB4cmVjdn0gPVxuICAgICAgaXNfYW9fZm4obnNfZ2VuKVxuICAgICAgICA/IG5zX2dlbih0aGlzLCBmX291dClcbiAgICAgICAgOiBuc19nZW47XG5cbiAgICBpZiAodW5kZWZpbmVkICE9PSB4ZW1pdCkge1xuICAgICAgZl9vdXQueGVtaXQgPSB4ZW1pdDt9XG5cbiAgICBpZiAoISB4aW5pdCkge3hpbml0ID0gYW9nX3Npbms7fVxuICAgIGxldCByZXMgPSB4aW5pdCh0aGlzLCBmX291dCxcbiAgICAgIHhyZWN2ID8gX3hmX2dlbi5jcmVhdGUoeHJlY3YpIDogdW5kZWZpbmVkKTtcblxuICAgIGxldCBnX2luID0gZl9vdXQuZ19pbiA9IHJlcy5nX2luIHx8IHJlcztcbiAgICByZXR1cm4gcmVzICE9PSBnX2luXG4gICAgICA/IHJlcyAvLyByZXMgaXMgYW4gb3V0cHV0IGdlbmVyYXRvclxuICAgICAgOigvLyByZXMgaXMgYW4gaW5wdXQgZ2VuZXJhdG9yXG4gICAgICAgICAgZ19pbi5uZXh0KCksXG4gICAgICAgICAgZl9vdXQuYmluZF9nYXRlZCh0aGlzKSkgfVxuXG4sIC8vIEVTMjAxNSBnZW5lcmF0b3IgYXBpXG4gIG5leHQodikge3JldHVybiB7dmFsdWU6IHRoaXMucmVzdW1lKHYpLCBkb25lOiB0cnVlfX1cbiwgcmV0dXJuKCkge3JldHVybiB7dmFsdWU6IHRoaXMuYWJvcnQoYW9fZG9uZSQxKSwgZG9uZTogdHJ1ZX19XG4sIHRocm93KGVycikge3JldHVybiB7dmFsdWU6IHRoaXMuYWJvcnQoZXJyKSwgZG9uZTogdHJ1ZX19IH0gKTtcblxuXG5jb25zdCBfeGZfZ2VuID0ge1xuICBjcmVhdGUoeGYpIHtcbiAgICBsZXQgc2VsZiA9IHtfX3Byb3RvX186IHRoaXN9O1xuICAgIHNlbGYueGcgPSB4ZihzZWxmLnhmX2ludigpKTtcbiAgICByZXR1cm4gc2VsZn1cblxuLCAqeGZfaW52KCkge1xuICAgIHdoaWxlICgxKSB7XG4gICAgICBsZXQgdGlwID0gdGhpcy5fdGlwO1xuICAgICAgaWYgKHRoaXMgPT09IHRpcCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZGVyZmxvdycpfVxuICAgICAgZWxzZSB0aGlzLl90aXAgPSB0aGlzO1xuXG4gICAgICB5aWVsZCB0aXA7fSB9XG5cbiwgbmV4dCh2KSB7XG4gICAgdGhpcy5fdGlwID0gdjtcbiAgICByZXR1cm4gdGhpcy54Zy5uZXh0KHYpfVxuXG4sIHJldHVybigpIHt0aGlzLnhnLnJldHVybigpO31cbiwgdGhyb3coKSB7dGhpcy54Zy50aHJvdygpO30gfTtcblxuZnVuY3Rpb24gYW9fcHVzaF9zdHJlYW0oYXNfdmVjKSB7XG4gIGxldCBxPVtdLCBbZmVuY2UsIHJlc3VtZSwgYWJvcnRdID0gYW9fZmVuY2VfdigpO1xuICBsZXQgc3RyZWFtID0gYW9fc3RyZWFtX2ZlbmNlKGZlbmNlKTtcblxuICByZXR1cm4gT2JqZWN0LmFzc2lnbihzdHJlYW0se1xuICAgIHN0cmVhbVxuICAsIGFib3J0XG4gICwgcHVzaCguLi4gYXJncykge1xuICAgICAgaWYgKHRydWUgPT09IGFzX3ZlYykge1xuICAgICAgICBxLnB1c2goYXJncyk7fVxuICAgICAgZWxzZSBxLnB1c2goLi4uIGFyZ3MpO1xuXG4gICAgICByZXN1bWUocSk7XG4gICAgICByZXR1cm4gcS5sZW5ndGh9IH0gKSB9XG5cblxuZnVuY3Rpb24gYW9fc3RyZWFtX2ZlbmNlKGZlbmNlKSB7XG4gIGxldCBbd2hlbl9kb25lLCByZXNfZG9uZSwgcmVqX2RvbmVdID0gYW9fZGVmZXJfdigpO1xuICBsZXQgcmVzID0gX2FvX3N0cmVhbV9mZW5jZShmZW5jZSwgcmVzX2RvbmUsIHJlal9kb25lKTtcbiAgcmVzLndoZW5fZG9uZSA9IHdoZW5fZG9uZTtcbiAgcmV0dXJuIHJlc31cblxuXG5hc3luYyBmdW5jdGlvbiAqIF9hb19zdHJlYW1fZmVuY2UoZmVuY2UsIHJlc29sdmUsIHJlamVjdCkge1xuICB0cnkge1xuICAgIGxldCBwX3JlYWR5ID0gZmVuY2UoKTtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgbGV0IGJhdGNoID0gYXdhaXQgcF9yZWFkeTtcbiAgICAgIGJhdGNoID0gYmF0Y2guc3BsaWNlKDAsIGJhdGNoLmxlbmd0aCk7XG5cbiAgICAgIHBfcmVhZHkgPSBmZW5jZSgpO1xuICAgICAgeWllbGQgKiBiYXRjaDt9IH1cblxuICBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKCFlcnIgfHwgZXJyLmFvX2RvbmUpIHtcbiAgICAgIHJlc29sdmUodHJ1ZSk7fVxuICAgIGVsc2UgcmVqZWN0KGVycik7fSB9XG5cbmZ1bmN0aW9uIGFvX2ludGVydmFsKG1zPTEwMDApIHtcbiAgbGV0IFtfZmVuY2UsIF9yZXN1bWUsIF9hYm9ydF0gPSBhb19mZW5jZV9mbigpO1xuICBsZXQgdGlkID0gc2V0SW50ZXJ2YWwoX3Jlc3VtZSwgbXMsIDEpO1xuICBpZiAodGlkLnVucmVmKSB7dGlkLnVucmVmKCk7fVxuICBfZmVuY2Uuc3RvcCA9ICgoKSA9PiB7XG4gICAgdGlkID0gY2xlYXJJbnRlcnZhbCh0aWQpO1xuICAgIF9hYm9ydCgpO30pO1xuXG4gIHJldHVybiBfZmVuY2V9XG5cblxuZnVuY3Rpb24gYW9fdGltZW91dChtcz0xMDAwKSB7XG4gIGxldCB0aWQsIFtfZmVuY2UsIF9yZXN1bWVdID0gYW9fZmVuY2VfZm4odGltZW91dCk7XG4gIHJldHVybiB0aW1lb3V0XG5cbiAgZnVuY3Rpb24gdGltZW91dCgpIHtcbiAgICB0aWQgPSBzZXRUaW1lb3V0KF9yZXN1bWUsIG1zLCAxKTtcbiAgICBpZiAodGlkLnVucmVmKSB7dGlkLnVucmVmKCk7fVxuICAgIHJldHVybiBfZmVuY2UoKX0gfVxuXG5cbmZ1bmN0aW9uIGFvX2RlYm91bmNlKG1zPTMwMCwgYW9faXRlcmFibGUpIHtcbiAgbGV0IHRpZCwgW19mZW5jZSwgX3Jlc3VtZV0gPSBhb19mZW5jZV9mbigpO1xuXG4gIF9mZW5jZS53aGVuX3J1biA9ICgoYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBsZXQgcDtcbiAgICAgIGZvciBhd2FpdCAobGV0IHYgb2YgYW9faXRlcmFibGUpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpZCk7XG4gICAgICAgIHAgPSBfZmVuY2UoKTtcbiAgICAgICAgdGlkID0gc2V0VGltZW91dChfcmVzdW1lLCBtcywgdik7fVxuXG4gICAgICBhd2FpdCBwO31cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICBhb19jaGVja19kb25lKGVycik7fSB9KSgpKTtcblxuICByZXR1cm4gX2ZlbmNlfVxuXG5cbmFzeW5jIGZ1bmN0aW9uICogYW9fdGltZXMoYW9faXRlcmFibGUpIHtcbiAgbGV0IHRzMCA9IERhdGUubm93KCk7XG4gIGZvciBhd2FpdCAobGV0IHYgb2YgYW9faXRlcmFibGUpIHtcbiAgICB5aWVsZCBEYXRlLm5vdygpIC0gdHMwO30gfVxuXG5mdW5jdGlvbiBhb19kb21fYW5pbWF0aW9uKCkge1xuICBsZXQgdGlkLCBbX2ZlbmNlLCBfcmVzdW1lXSA9IGFvX2ZlbmNlX2ZuKHJhZik7XG4gIHJhZi5zdG9wID0gKCgpID0+IHtcbiAgICB0aWQgPSBjYW5jZWxBbmltYXRpb25GcmFtZSh0aWQpO1xuICAgIHJhZi5kb25lID0gdHJ1ZTt9KTtcblxuICByZXR1cm4gcmFmXG5cbiAgZnVuY3Rpb24gcmFmKCkge1xuICAgIHRpZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShfcmVzdW1lKTtcbiAgICByZXR1cm4gX2ZlbmNlKCl9IH1cblxuY29uc3QgX2V2dF9pbml0ID0gUHJvbWlzZS5yZXNvbHZlKHt0eXBlOidpbml0J30pO1xuZnVuY3Rpb24gYW9fZG9tX2xpc3RlbihzZWxmPWFvX3F1ZXVlKCkpIHtcbiAgcmV0dXJuIF9iaW5kLnNlbGYgPSBzZWxmID17XG4gICAgX19wcm90b19fOiBzZWxmXG4gICwgd2l0aF9kb20oZG9tLCBmbikge1xuICAgICAgcmV0dXJuIGRvbS5hZGRFdmVudExpc3RlbmVyXG4gICAgICAgID8gX2FvX3dpdGhfZG9tKF9iaW5kLCBmbiwgZG9tKVxuICAgICAgICA6IF9hb193aXRoX2RvbV92ZWMoX2JpbmQsIGZuLCBkb20pfSB9XG5cbiAgZnVuY3Rpb24gX2JpbmQoZG9tLCBmbl9ldnQsIGZuX2RvbSkge1xuICAgIHJldHVybiBldnQgPT4ge1xuICAgICAgbGV0IHYgPSBmbl9ldnRcbiAgICAgICAgPyBmbl9ldnQoZXZ0LCBkb20sIGZuX2RvbSlcbiAgICAgICAgOiBmbl9kb20oZG9tLCBldnQpO1xuXG4gICAgICBpZiAobnVsbCAhPSB2KSB7XG4gICAgICAgIHNlbGYuZ19pbi5uZXh0KHYpO30gfSB9IH1cblxuXG5mdW5jdGlvbiBfYW9fd2l0aF9kb20oX2JpbmQsIGZuLCBkb20pIHtcbiAgbGV0IF9vbl9ldnQ7XG4gIGlmIChpc19hb19mbihmbikpIHtcbiAgICBfZXZ0X2luaXQudGhlbihcbiAgICAgIF9vbl9ldnQgPSBfYmluZChkb20sIHZvaWQgMCwgZm4pKTsgfVxuXG4gIHJldHVybiB7XG4gICAgX19wcm90b19fOiBfYmluZC5zZWxmXG4gICwgbGlzdGVuKC4uLmFyZ3MpIHtcbiAgICAgIGxldCBvcHQsIGV2dF9mbiA9IF9vbl9ldnQ7XG5cbiAgICAgIGxldCBsYXN0ID0gYXJncy5wb3AoKTtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgbGFzdCkge1xuICAgICAgICBldnRfZm4gPSBfYmluZChkb20sIGxhc3QsIF9vbl9ldnQpO1xuICAgICAgICBsYXN0ID0gYXJncy5wb3AoKTt9XG5cbiAgICAgIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIGxhc3QpIHtcbiAgICAgICAgYXJncy5wdXNoKGxhc3QpO31cbiAgICAgIGVsc2Ugb3B0ID0gbGFzdDtcblxuICAgICAgZm9yIChsZXQgZXZ0IG9mIGFyZ3MpIHtcbiAgICAgICAgZG9tLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgZXZ0LCBldnRfZm4sIG9wdCk7IH1cblxuICAgICAgcmV0dXJuIHRoaXN9IH0gfVxuXG5cbmZ1bmN0aW9uIF9hb193aXRoX2RvbV92ZWMoX2JpbmQsIGZuLCBlY3R4X2xpc3QpIHtcbiAgZWN0eF9saXN0ID0gQXJyYXkuZnJvbShlY3R4X2xpc3QsXG4gICAgZG9tID0+IF9hb193aXRoX2RvbShfYmluZCwgZm4sIGRvbSkpO1xuXG4gIHJldHVybiB7XG4gICAgX19wcm90b19fOiBfYmluZC5zZWxmXG4gICwgbGlzdGVuKC4uLmFyZ3MpIHtcbiAgICAgIGZvciAobGV0IGVjdHggb2YgZWN0eF9saXN0KSB7XG4gICAgICAgIGVjdHgubGlzdGVuKC4uLmFyZ3MpO31cbiAgICAgIHJldHVybiB0aGlzfSB9IH1cblxuZXhwb3J0IHsgX2FnX2NvcHksIF9hb19mZW5jZV9jb3JlX2FwaV8sIF9hb19pdGVyX2ZlbmNlZCwgX2FvX3J1biwgX2FvX3RhcCwgYW9fY2hlY2tfZG9uZSwgYW9fZGVib3VuY2UsIGFvX2RlZmVyLCBhb19kZWZlcl9jdHgsIGFvX2RlZmVyX3YsIGFvX2RvbV9hbmltYXRpb24sIGFvX2RvbV9saXN0ZW4sIGFvX2RvbmUkMSBhcyBhb19kb25lLCBhb19kcml2ZSwgYW9fZmVlZGVyLCBhb19mZWVkZXJfdiwgYW9fZmVuY2VfZm4sIGFvX2ZlbmNlX2luLCBhb19mZW5jZV9pdGVyLCBhb19mZW5jZV9vYmosIGFvX2ZlbmNlX291dCwgYW9fZmVuY2Vfc2luaywgYW9fZmVuY2VfdiwgYW9fZmVuY2Vfd2hlbiwgYW9fZm9sZCwgYW9faW50ZXJ2YWwsIGFvX2l0ZXIsIGFvX2l0ZXJfZmVuY2UsIGFvX2l0ZXJfZmVuY2VkLCBhb19wdXNoX3N0cmVhbSwgYW9fcXVldWUsIGFvX3J1biwgYW9fc3BsaXQsIGFvX3N0ZXBfaXRlciwgYW9fc3RyZWFtX2ZlbmNlLCBhb190YXAsIGFvX3RpbWVvdXQsIGFvX3RpbWVzLCBhb190cmFja192LCBhb190cmFja193aGVuLCBhb193aGVuLCBhb194Zm9ybSwgYW9nX2ZlbmNlX3hmLCBhb2dfZ2F0ZWQsIGFvZ19pdGVyLCBhb2dfc2luaywgYXNfaXRlcl9wcm90bywgaXNfYW9fZm4sIGlzX2FvX2l0ZXIsIGl0ZXIsIHN0ZXBfaXRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm9hcC5tanMubWFwXG4iLCIndXNlIHN0cmljdCdcblxuaW1wb3J0IHthb19mZW5jZV9vYmosIGFvX2ZlbmNlX2lufSBmcm9tICdyb2FwJ1xuaW1wb3J0IHthb19kb21fbGlzdGVufSBmcm9tICdyb2FwJ1xuXG5cbmxldCBkZW1vX3RhcmdldCA9IGFvX2ZlbmNlX2luKClcbiAgLmFvX2ZvbGQgQDpcbiAgICAqIHhyZWN2KGcpIDo6XG4gICAgICBsZXQgbnMgPSB7fVxuICAgICAgZm9yIGxldCBlIG9mIGcgOjpcbiAgICAgICAgbnNbZS5rXSA9IGUudlxuICAgICAgICAgIHlpZWxkIG5zXG5cbiAgICBhc3luYyAqIHhlbWl0KGFnX291dCkgOjpcbiAgICAgIGZvciBhd2FpdCBsZXQgbnMgb2YgYWdfb3V0IDo6XG4gICAgICAgIHlpZWxkIHsuLi4gbnN9XG5cbiAgLmFsbG93X21hbnkoKVxuXG5cbmFvX2RvbV9saXN0ZW4oZGVtb190YXJnZXQpXG4gIC53aXRoX2RvbSBAXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbdHlwZT1yYW5nZV0nKVxuICAgIChlbGVtLCBldnQpID0+IEA6IGs6IGVsZW0uaWQsIHY6IGVsZW0udmFsdWVBc051bWJlclxuICAubGlzdGVuIEAgJ2lucHV0JywgJ2NoYW5nZScsXG5cbmNvbnNvbGUubG9nIEA6IGRlbW9fdGFyZ2V0XG5cbmNvbnN0IGFvX3RndF9yZ2IgPSBAISo+XG4gIGZvciBhd2FpdCBsZXQge2FhYSwgYmJiLCBjY2N9IG9mIGRlbW9fdGFyZ2V0IDo6XG4gICAgbGV0IHIgPSAoYWFhKi4yNTUpLnRvRml4ZWQoMSlcbiAgICBsZXQgZyA9IChiYmIqLjI1NSkudG9GaXhlZCgxKVxuICAgIGxldCBiID0gKGNjYyouMjU1KS50b0ZpeGVkKDEpXG4gICAgeWllbGQgYHJnYigke3J9LCAke2d9LCAke2J9KWBcbiAgICAgIFxuXG5jb25zdCBhb190Z3RfaHNsID0gQCEqPlxuICBmb3IgYXdhaXQgbGV0IHthYWEsIGJiYiwgY2NjfSBvZiBkZW1vX3RhcmdldCA6OlxuICAgIGxldCBoID0gKGFhYSowLjM2KS50b0ZpeGVkKDEpXG4gICAgbGV0IHMgPSAoYmJiKjAuMTApLnRvRml4ZWQoMSlcbiAgICBsZXQgbCA9IChjY2MqMC4xMCkudG9GaXhlZCgxKVxuICAgIFxuICAgIHlpZWxkIGBoc2woJHtofSwgJHtzfSUsICR7bH0lKWBcblxuXG46OiE+XG4gIGxldCBlbF9yZ2IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGd0X3JnYicpXG4gIGZvciBhd2FpdCBsZXQgcmdiIG9mIGFvX3RndF9yZ2IgOjpcbiAgICBlbF9yZ2IudGV4dENvbnRlbnQgPSByZ2JcbiAgICBlbF9yZ2Iuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gcmdiXG5cbjo6IT5cbiAgbGV0IGVsX2hzbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0Z3RfaHNsJylcbiAgZm9yIGF3YWl0IGxldCBoc2wgb2YgYW9fdGd0X2hzbCA6OlxuICAgIGVsX2hzbC50ZXh0Q29udGVudCA9IGhzbFxuICAgIGVsX2hzbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBoc2xcblxuXG46OiE+XG4gIGZvciBhd2FpdCBsZXQgZSBvZiBkZW1vX3RhcmdldCA6OlxuICAgIGNvbnNvbGUubG9nIEAgJ3N0cmVhbScsIGVcblxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sVUFBVSxHQUFHLENBQUM7QUFDcEIsRUFBRSxJQUFJLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNsQztBQUNBLE1BQU0sUUFBUSxHQUFHLElBQUk7QUFDckIsRUFBRSxVQUFVLEtBQUssT0FBTyxJQUFJO0FBQzVCLE9BQU8sRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDMUI7QUFDQTtBQUNBLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNqRCxNQUFNLGFBQWEsR0FBRyxHQUFHLElBQUk7QUFDN0IsRUFBRSxJQUFJLEdBQUcsS0FBSyxTQUFTLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRTtBQUNoRCxJQUFJLE1BQU0sR0FBRyxDQUFDO0FBQ2QsRUFBRSxPQUFPLElBQUksQ0FBQyxDQUFDO0FBQ2Y7QUFDQTtBQUNBLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNO0FBQ2hDLEVBQUUsU0FBUyxLQUFLLElBQUksR0FBRyxNQUFNO0FBQzdCLElBQUksTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJO0FBQ3RCLElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQztBQWtCZDtBQUNBLFNBQVMsWUFBWSxDQUFDLE1BQU0s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LFFBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzFEO0FBQ0EsRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRTtBQUN0QixJQUFJLElBQUksS0FBSyxHQUFHLFlBQVksRUFBRSxDQUFDO0FBQy9CO0FBQ0EsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7QUFDN0IsTUFBTSxRQUFRLENBQUMsTUFBTSxDQUFDO0FBQ3RCLFVBQVUsTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7QUFDN0IsVUFBVSxNQUFNLENBQUM7QUFDakI7QUFDQSxJQUFJLElBQUksU0FBUyxLQUFLLEtBQUssRUFBRTtBQUM3QixNQUFNLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDM0I7QUFDQSxJQUFJLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLENBQUM7QUFDcEMsSUFBSSxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUs7QUFDL0IsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztBQUNqRDtBQUNBLElBQUksSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQztBQUM1QyxJQUFJLE9BQU8sR0FBRyxLQUFLLElBQUk7QUFDdkIsUUFBUSxHQUFHO0FBQ1g7QUFDQSxVQUFVLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDckIsVUFBVSxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7QUFDbkM7QUFDQTtBQUNBLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFD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
