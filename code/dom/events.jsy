import {_obj_assign} from '../core/_common.jsy'
import {_wm_pipe_closure, _wm_item} from '../core.jsy'


export const _ao_dom_events0 =
  _wm_pipe_closure(_ao_dom_events_ctx)

export function ao_dom_events(gsrc, ... ns_args) ::
  return _ao_dom_events0(gsrc)(...ns_args)


export function _ao_dom_events_ctx(gsrc) ::
  const dom_events = (... ns_args) =>
    0 === ns_args.length ? dom_events
      : dom_events.with(ns_args)

  return gsrc.dom_events = _obj_assign @
    dom_events, _dom_events_api,
    @{} wm_elems: new WeakMap()
        emit: info => gsrc.next(info)


export const _dom_events_api = @{}
  // wm_elems: new WeakMap()
  // emit: info => gsrc.next(info)

  listen(elem, evt, xfn, evt_opt) ::
    let {emit} = this
    ::
      let em = _wm_item(this.wm_elems, elem, _elem_map_entry)
      info = @{} ... this.info, ... em.info, dom_event: evt

      let old_fn = em.get(evt)
      let evt0 = evt.split(/[_.]/, 1)[0]

      elem.addEventListener @ evt0, evt_fn, evt_opt
      em.set(evt, evt_fn)

      if undefined !== old_fn ::
        elem.removeEventListener @ evt0, old_fn

    function evt_fn(e) ::
      let v = xfn(e, emit)
      if undefined !== v ::
        emit @: ... info, v
    return this


  remove(elem, ... keys) ::
    let {wm_elems} = this
    let evt_map = wm_elems.get(elem) || new Map()

    let ev_pairs
    if 0 === keys.length ::
      wm_elems.delete(elem)
      ev_pairs = evt_map.entries()

    else ::
      ev_pairs = keys.map @
        evt0 => [evt0, evt_map.get(evt0)]

    for let [evt0, evt_fn] of ev_pairs ::
      if undefined !== evt_fn ::
        evt_map.delete(evt0)
        elem.removeEventListener(evt0, evt_fn)
    return this

  set_info(el, info) ::
    let em = _wm_item(wm_elems, el, _elem_map_entry)
    _obj_assign(em, info)
    return this

  with(... ns_args) ::
    let {listen, set_info, info} = this
    set_info = set_info.bind(this)

    for let ns of ns_args ::
      let ns_this = undefined === ns.info ? this :
        @{} __proto__: this, info: @{} ... info, ... ns.info

      let events = @[] ... _iter_event_list(ns)
      for let elem of _iter_named_elems(ns._, set_info) ::
        for let evt_args of events ::
          listen.call(ns_this, elem, ... evt_args)

    return this


function _elem_map_entry(elem) ::
  let k = elem.name || elem.id
    || (elem.type || elem.tagName).toLowerCase()

  let m = new Map()
  m.info = @{} elem_name: k, k
  return m


function * _iter_named_elems(lst, set_info) ::
  lst = Array.isArray(lst) ? lst
    : lst.tagName ? [lst]
    : Object.entries(lst)

  for let ea of lst ::
    if ea.tagName ::
      yield ea

    set_info(ea[1], {k: ea[0]})
    yield ea[1]


function * _iter_event_list(ns) ::
  for let [attr, efn] of Object.entries(ns) ::
    if ! efn || /[^a-z]/.test(attr) ::
      continue

    attr = attr.replace('_', '.')
    if 'function' === typeof efn ::
      yield [attr, efn, efn.evt_opt]

    else if efn.on_evt || efn.evt_opt ::
      yield [attr, efn.on_evt, efn.evt_opt]

