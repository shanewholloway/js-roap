import {ao_dom_listen, ao_drive, ao_fold, ao_interval, ao_iter_fenced, ao_dom_animation} from 'roap'
import {bind_output_log} from './_demo_utils.jsy'


let dom_hub = ao_dom_listen()

dom_hub
  .with_dom @
    document.querySelector('#playarea')
    (el, evt) => evt

  .listen @
    'pointerdown', 'pointerup',
    'pointerenter', 'pointerleave', 'pointercancel'
    //'pointerover', 'pointerout'

  .listen @
    'click', 'dblclick'

  .listen @ 'contextmenu',
    evt => ::
      // context menus distract from the demo...
      evt.preventDefault()
      return evt


if 1 ::
  let dom_fast_hub = ao_dom_listen @
    ao_fold() // use ao_fold() instead of ao_queue()

  dom_fast_hub
    .with_dom @ document.querySelector('#playarea')
    .listen @ 'pointermove', evt => evt

  // rate limit dom_fast_hub into dom_hub
  let gen_limiter =
    ao_iter_fenced @ dom_fast_hub, 
      0 ? ao_dom_animation()
        : ao_interval(200)

  ao_drive @ gen_limiter, dom_hub.g_in


::!> // create output
  let out_log = bind_output_log('output')
  for await let evt of dom_hub ::
    let msg = [evt.type]

    if evt.pointerType ::
      msg = @[]
        `${evt.type}[${evt.pointerType} id:${evt.pointerId}${evt.isPrimary?'*':''}]`
        `btn:${evt.button}::${evt.buttons.toString(2)}b`
        `w,h:[${evt.width.toFixed(3)},${evt.height.toFixed(3)}] pen:[${evt.tiltX.toFixed(3)},${evt.tiltY.toFixed(3)},${evt.pressure.toFixed(3)}]`

    out_log(msg)

    if 0 ::
      // check that every event arrives, despite long processing times
      await new Promise @ y => setTimeout(y, 200)

